// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: group.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CategoryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CategoryValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CategoryValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on CategoryAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryAddReqMultiError,
// or nil if none found.
func (m *CategoryAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryAddReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryAddReqMultiError(errors)
	}

	return nil
}

// CategoryAddReqMultiError is an error wrapping multiple validation errors
// returned by CategoryAddReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryAddReqMultiError) AllErrors() []error { return m }

// CategoryAddReqValidationError is the validation error returned by
// CategoryAddReq.Validate if the designated constraints aren't met.
type CategoryAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryAddReqValidationError) ErrorName() string { return "CategoryAddReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryAddReqValidationError{}

// Validate checks the field values on CategoryAddResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryAddRespMultiError, or nil if none found.
func (m *CategoryAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryAddRespMultiError(errors)
	}

	return nil
}

// CategoryAddRespMultiError is an error wrapping multiple validation errors
// returned by CategoryAddResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryAddRespMultiError) AllErrors() []error { return m }

// CategoryAddRespValidationError is the validation error returned by
// CategoryAddResp.Validate if the designated constraints aren't met.
type CategoryAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryAddRespValidationError) ErrorName() string { return "CategoryAddRespValidationError" }

// Error satisfies the builtin error interface
func (e CategoryAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryAddRespValidationError{}

// Validate checks the field values on CategoryDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryDelReqMultiError,
// or nil if none found.
func (m *CategoryDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CategoryDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryDelReqMultiError(errors)
	}

	return nil
}

// CategoryDelReqMultiError is an error wrapping multiple validation errors
// returned by CategoryDelReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDelReqMultiError) AllErrors() []error { return m }

// CategoryDelReqValidationError is the validation error returned by
// CategoryDelReq.Validate if the designated constraints aren't met.
type CategoryDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDelReqValidationError) ErrorName() string { return "CategoryDelReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDelReqValidationError{}

// Validate checks the field values on CategoryDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDelRespMultiError, or nil if none found.
func (m *CategoryDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryDelRespMultiError(errors)
	}

	return nil
}

// CategoryDelRespMultiError is an error wrapping multiple validation errors
// returned by CategoryDelResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDelRespMultiError) AllErrors() []error { return m }

// CategoryDelRespValidationError is the validation error returned by
// CategoryDelResp.Validate if the designated constraints aren't met.
type CategoryDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDelRespValidationError) ErrorName() string { return "CategoryDelRespValidationError" }

// Error satisfies the builtin error interface
func (e CategoryDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDelRespValidationError{}

// Validate checks the field values on CategoryUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateReqMultiError, or nil if none found.
func (m *CategoryUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryUpdateReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryUpdateReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryUpdateReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryUpdateReqMultiError(errors)
	}

	return nil
}

// CategoryUpdateReqMultiError is an error wrapping multiple validation errors
// returned by CategoryUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateReqMultiError) AllErrors() []error { return m }

// CategoryUpdateReqValidationError is the validation error returned by
// CategoryUpdateReq.Validate if the designated constraints aren't met.
type CategoryUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateReqValidationError) ErrorName() string {
	return "CategoryUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateReqValidationError{}

// Validate checks the field values on CategoryUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateRespMultiError, or nil if none found.
func (m *CategoryUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return CategoryUpdateRespMultiError(errors)
	}

	return nil
}

// CategoryUpdateRespMultiError is an error wrapping multiple validation errors
// returned by CategoryUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateRespMultiError) AllErrors() []error { return m }

// CategoryUpdateRespValidationError is the validation error returned by
// CategoryUpdateResp.Validate if the designated constraints aren't met.
type CategoryUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateRespValidationError) ErrorName() string {
	return "CategoryUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateRespValidationError{}

// Validate checks the field values on CategoryGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryGetReqMultiError,
// or nil if none found.
func (m *CategoryGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CategoryGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryGetReqMultiError(errors)
	}

	return nil
}

// CategoryGetReqMultiError is an error wrapping multiple validation errors
// returned by CategoryGetReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetReqMultiError) AllErrors() []error { return m }

// CategoryGetReqValidationError is the validation error returned by
// CategoryGetReq.Validate if the designated constraints aren't met.
type CategoryGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetReqValidationError) ErrorName() string { return "CategoryGetReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetReqValidationError{}

// Validate checks the field values on CategoryGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryGetRespMultiError, or nil if none found.
func (m *CategoryGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryGetRespMultiError(errors)
	}

	return nil
}

// CategoryGetRespMultiError is an error wrapping multiple validation errors
// returned by CategoryGetResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryGetRespMultiError) AllErrors() []error { return m }

// CategoryGetRespValidationError is the validation error returned by
// CategoryGetResp.Validate if the designated constraints aren't met.
type CategoryGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryGetRespValidationError) ErrorName() string { return "CategoryGetRespValidationError" }

// Error satisfies the builtin error interface
func (e CategoryGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryGetRespValidationError{}

// Validate checks the field values on CategoryListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListReqMultiError, or nil if none found.
func (m *CategoryListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CategoryListReqMultiError(errors)
	}

	return nil
}

// CategoryListReqMultiError is an error wrapping multiple validation errors
// returned by CategoryListReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListReqMultiError) AllErrors() []error { return m }

// CategoryListReqValidationError is the validation error returned by
// CategoryListReq.Validate if the designated constraints aren't met.
type CategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListReqValidationError) ErrorName() string { return "CategoryListReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListReqValidationError{}

// Validate checks the field values on CategoryListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListRespMultiError, or nil if none found.
func (m *CategoryListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryListRespMultiError(errors)
	}

	return nil
}

// CategoryListRespMultiError is an error wrapping multiple validation errors
// returned by CategoryListResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListRespMultiError) AllErrors() []error { return m }

// CategoryListRespValidationError is the validation error returned by
// CategoryListResp.Validate if the designated constraints aren't met.
type CategoryListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListRespValidationError) ErrorName() string { return "CategoryListRespValidationError" }

// Error satisfies the builtin error interface
func (e CategoryListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListRespValidationError{}

// Validate checks the field values on CategoryPageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryPageReqMultiError, or nil if none found.
func (m *CategoryPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := CategoryPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryPageReqMultiError(errors)
	}

	return nil
}

// CategoryPageReqMultiError is an error wrapping multiple validation errors
// returned by CategoryPageReq.ValidateAll() if the designated constraints
// aren't met.
type CategoryPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryPageReqMultiError) AllErrors() []error { return m }

// CategoryPageReqValidationError is the validation error returned by
// CategoryPageReq.Validate if the designated constraints aren't met.
type CategoryPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryPageReqValidationError) ErrorName() string { return "CategoryPageReqValidationError" }

// Error satisfies the builtin error interface
func (e CategoryPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryPageReqValidationError{}

// Validate checks the field values on CategoryPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryPageRespMultiError, or nil if none found.
func (m *CategoryPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryPageRespMultiError(errors)
	}

	return nil
}

// CategoryPageRespMultiError is an error wrapping multiple validation errors
// returned by CategoryPageResp.ValidateAll() if the designated constraints
// aren't met.
type CategoryPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryPageRespMultiError) AllErrors() []error { return m }

// CategoryPageRespValidationError is the validation error returned by
// CategoryPageResp.Validate if the designated constraints aren't met.
type CategoryPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryPageRespValidationError) ErrorName() string { return "CategoryPageRespValidationError" }

// Error satisfies the builtin error interface
func (e CategoryPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryPageRespValidationError{}

// Validate checks the field values on CategoryNodeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryNodeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryNodeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryNodeItemMultiError, or nil if none found.
func (m *CategoryNodeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryNodeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for Status

	if len(errors) > 0 {
		return CategoryNodeItemMultiError(errors)
	}

	return nil
}

// CategoryNodeItemMultiError is an error wrapping multiple validation errors
// returned by CategoryNodeItem.ValidateAll() if the designated constraints
// aren't met.
type CategoryNodeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryNodeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryNodeItemMultiError) AllErrors() []error { return m }

// CategoryNodeItemValidationError is the validation error returned by
// CategoryNodeItem.Validate if the designated constraints aren't met.
type CategoryNodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryNodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryNodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryNodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryNodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryNodeItemValidationError) ErrorName() string { return "CategoryNodeItemValidationError" }

// Error satisfies the builtin error interface
func (e CategoryNodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryNodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryNodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryNodeItemValidationError{}

// Validate checks the field values on CategoryNodeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryNodeListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryNodeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryNodeListReqMultiError, or nil if none found.
func (m *CategoryNodeListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryNodeListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CategoryNodeListReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryNodeListReqMultiError(errors)
	}

	return nil
}

// CategoryNodeListReqMultiError is an error wrapping multiple validation
// errors returned by CategoryNodeListReq.ValidateAll() if the designated
// constraints aren't met.
type CategoryNodeListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryNodeListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryNodeListReqMultiError) AllErrors() []error { return m }

// CategoryNodeListReqValidationError is the validation error returned by
// CategoryNodeListReq.Validate if the designated constraints aren't met.
type CategoryNodeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryNodeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryNodeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryNodeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryNodeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryNodeListReqValidationError) ErrorName() string {
	return "CategoryNodeListReqValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryNodeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryNodeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryNodeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryNodeListReqValidationError{}

// Validate checks the field values on CategoryNodeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryNodeListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryNodeListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryNodeListRespMultiError, or nil if none found.
func (m *CategoryNodeListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryNodeListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for LastVersion

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryNodeListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryNodeListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryNodeListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryNodeListRespMultiError(errors)
	}

	return nil
}

// CategoryNodeListRespMultiError is an error wrapping multiple validation
// errors returned by CategoryNodeListResp.ValidateAll() if the designated
// constraints aren't met.
type CategoryNodeListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryNodeListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryNodeListRespMultiError) AllErrors() []error { return m }

// CategoryNodeListRespValidationError is the validation error returned by
// CategoryNodeListResp.Validate if the designated constraints aren't met.
type CategoryNodeListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryNodeListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryNodeListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryNodeListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryNodeListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryNodeListRespValidationError) ErrorName() string {
	return "CategoryNodeListRespValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryNodeListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryNodeListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryNodeListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryNodeListRespValidationError{}

// Validate checks the field values on CategoryHeartBeatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryHeartBeatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryHeartBeatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryHeartBeatReqMultiError, or nil if none found.
func (m *CategoryHeartBeatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryHeartBeatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRegisterCode()) < 1 {
		err := CategoryHeartBeatReqValidationError{
			field:  "RegisterCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubscribeCode()) < 1 {
		err := CategoryHeartBeatReqValidationError{
			field:  "SubscribeCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastVersion

	if utf8.RuneCountInString(m.GetIp()) < 1 {
		err := CategoryHeartBeatReqValidationError{
			field:  "Ip",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPort()) < 1 {
		err := CategoryHeartBeatReqValidationError{
			field:  "Port",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryHeartBeatReqMultiError(errors)
	}

	return nil
}

// CategoryHeartBeatReqMultiError is an error wrapping multiple validation
// errors returned by CategoryHeartBeatReq.ValidateAll() if the designated
// constraints aren't met.
type CategoryHeartBeatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryHeartBeatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryHeartBeatReqMultiError) AllErrors() []error { return m }

// CategoryHeartBeatReqValidationError is the validation error returned by
// CategoryHeartBeatReq.Validate if the designated constraints aren't met.
type CategoryHeartBeatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryHeartBeatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryHeartBeatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryHeartBeatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryHeartBeatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryHeartBeatReqValidationError) ErrorName() string {
	return "CategoryHeartBeatReqValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryHeartBeatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryHeartBeatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryHeartBeatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryHeartBeatReqValidationError{}

// Validate checks the field values on CategoryHeartBeatResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryHeartBeatResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryHeartBeatResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryHeartBeatRespMultiError, or nil if none found.
func (m *CategoryHeartBeatResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryHeartBeatResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for LastVersion

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryHeartBeatRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryHeartBeatRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryHeartBeatRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryHeartBeatRespMultiError(errors)
	}

	return nil
}

// CategoryHeartBeatRespMultiError is an error wrapping multiple validation
// errors returned by CategoryHeartBeatResp.ValidateAll() if the designated
// constraints aren't met.
type CategoryHeartBeatRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryHeartBeatRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryHeartBeatRespMultiError) AllErrors() []error { return m }

// CategoryHeartBeatRespValidationError is the validation error returned by
// CategoryHeartBeatResp.Validate if the designated constraints aren't met.
type CategoryHeartBeatRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryHeartBeatRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryHeartBeatRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryHeartBeatRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryHeartBeatRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryHeartBeatRespValidationError) ErrorName() string {
	return "CategoryHeartBeatRespValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryHeartBeatRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryHeartBeatResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryHeartBeatRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryHeartBeatRespValidationError{}
