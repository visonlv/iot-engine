// Code generated by protoc-gen-vkit. DO NOT EDIT.
// versions:
// - protoc-gen-vkit v1.0.0
// - protoc             v3.21.1
// source: group.proto

package proto

import (
	context "context"
	grpcx "github.com/visonlv/go-vkit/grpcx"
	grpc "google.golang.org/grpc"
)

var _ = new(context.Context)
var _ = new(grpc.CallOption)
var _ = new(grpcx.Client)

type CategoryServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *CategoryServiceClient) Add(ctx context.Context, in *CategoryAddReq, opts ...grpc.CallOption) (*CategoryAddResp, error) {
	out := new(CategoryAddResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) Del(ctx context.Context, in *CategoryDelReq, opts ...grpc.CallOption) (*CategoryDelResp, error) {
	out := new(CategoryDelResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) Update(ctx context.Context, in *CategoryUpdateReq, opts ...grpc.CallOption) (*CategoryUpdateResp, error) {
	out := new(CategoryUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) Get(ctx context.Context, in *CategoryGetReq, opts ...grpc.CallOption) (*CategoryGetResp, error) {
	out := new(CategoryGetResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) List(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error) {
	out := new(CategoryListResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) Page(ctx context.Context, in *CategoryPageReq, opts ...grpc.CallOption) (*CategoryPageResp, error) {
	out := new(CategoryPageResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *CategoryServiceClient) NodeList(ctx context.Context, in *CategoryNodeListReq, opts ...grpc.CallOption) (*CategoryNodeListResp, error) {
	out := new(CategoryNodeListResp)
	err := c.cc.Invoke(ctx, c.name, "CategoryService.NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type CategoryService_HeartBeatClient struct {
	grpcx.ClientStream
}

func (x *CategoryService_HeartBeatClient) Send(m *CategoryHeartBeatReq) error {
	return x.ClientStream.Send(m)
}

func (x *CategoryService_HeartBeatClient) Recv() (*CategoryHeartBeatResp, error) {
	m := new(CategoryHeartBeatResp)
	if err := x.ClientStream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *CategoryServiceClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (*CategoryService_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &grpc.StreamDesc{
		StreamName: "HeartBeat", ServerStreams: true, ClientStreams: true}, c.name, "CategoryService.HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &CategoryService_HeartBeatClient{stream}
	return x, nil
}

func NewCategoryServiceClient(name string, cc grpcx.Client) *CategoryServiceClient {
	return &CategoryServiceClient{name, cc}
}

type CategoryService_HeartBeatServer struct {
	grpc.ServerStream
}

func (x *CategoryService_HeartBeatServer) SetStream(s grpc.ServerStream) {
	x.ServerStream = s
}

func (x *CategoryService_HeartBeatServer) Send(m *CategoryHeartBeatResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *CategoryService_HeartBeatServer) Recv() (*CategoryHeartBeatReq, error) {
	m := new(CategoryHeartBeatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}
