// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"fmt"
	"io"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/logger"
	"github.com/visonlv/iot-engine/group/handler/category"
	"github.com/visonlv/iot-engine/group/handler/stream"
	"github.com/visonlv/iot-engine/group/model"
	pb "github.com/visonlv/iot-engine/group/proto"
	"gorm.io/gorm"
)

type CategoryService struct {
}

func (the *CategoryService) Add(ctx context.Context, req *pb.CategoryAddReq, resp *pb.CategoryAddResp) error {
	_, err := model.CategoryGetByCode(nil, req.Item.Code)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分类信息错误:%s", err.Error())
		return nil
	}
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "分类代码已经存在"
		return nil
	}

	// 检查内容是否合规
	if _, err := category.IsContentValid(req.Item.Content); err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("内容格式错误:%s", err.Error())
		return nil
	}

	m := &model.CategoryModel{
		Name:    req.Item.Name,
		Code:    req.Item.Code,
		Content: req.Item.Content,
	}
	err = model.CategoryAdd(nil, m)

	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("添加分类失败:%s", err.Error())
		return nil
	}

	stream.ReloadCategory(m)
	resp.Id = m.Id
	return nil
}

func (the *CategoryService) Del(ctx context.Context, req *pb.CategoryDelReq, resp *pb.CategoryDelResp) error {
	m, err := model.CategoryGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分类失败:%s", err.Error())
		return nil
	}

	m.IsDelete = 1
	err = model.CategoryUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除分类失败:%s", err.Error())
		return nil
	}

	stream.ReloadCategory(m)

	resp.Id = req.Id
	return nil
}

func (the *CategoryService) Update(ctx context.Context, req *pb.CategoryUpdateReq, resp *pb.CategoryUpdateResp) error {
	m, err := model.CategoryGet(nil, req.Item.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分类失败:%s", err.Error())
		return nil
	}

	item, err := model.CategoryGetByCode(nil, req.Item.Code)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分类失败:%s", err.Error())
		return nil
	}
	if item.Id != req.Item.Id {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "分类代码已经存在"
		return nil
	}

	// 检查内容是否合规
	if _, err := category.IsContentValid(req.Item.Content); err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("内容格式错误:%s", err.Error())
		return nil
	}

	m.Code = req.Item.Code
	m.Name = req.Item.Name
	m.Content = req.Item.Content
	err = model.CategoryUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("修改分类失败:%s", err.Error())
		return nil
	}

	stream.ReloadCategory(m)
	resp.Id = m.Id
	return nil
}

func (the *CategoryService) Get(ctx context.Context, req *pb.CategoryGetReq, resp *pb.CategoryGetResp) error {
	m, err := model.CategoryGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分类失败:%s", err.Error())
		return nil
	}
	itemRet, _ := category.CategoryToCategoryPb(m)
	resp.Item = itemRet
	return nil
}

func (the *CategoryService) List(ctx context.Context, req *pb.CategoryListReq, resp *pb.CategoryListResp) error {
	list, err := model.CategoryList(nil)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取列表失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Category, 0)
	for _, m := range list {
		itemRet, _ := category.CategoryToCategoryPb(m)
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	return nil
}

func (the *CategoryService) Page(ctx context.Context, req *pb.CategoryPageReq, resp *pb.CategoryPageResp) error {
	list, total, err := model.CategoryPage(nil, req.PageIndex, req.PageSize)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Category, 0)
	for _, m := range list {
		itemRet, _ := category.CategoryToCategoryPb(m)
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	resp.Total = total
	return nil
}

func (the *CategoryService) NodeList(ctx context.Context, req *pb.CategoryNodeListReq, resp *pb.CategoryNodeListResp) error {
	list, lastVersion, err := stream.NodeListByCode(req.Code)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取绑定列表状态失败:%s", err.Error())
		return nil
	}
	resp.LastVersion = lastVersion
	resp.Items = list
	return nil
}

func (the *CategoryService) HeartBeat(ctx context.Context, s *pb.CategoryService_HeartBeatServer) error {
	msg, err := s.Recv()
	if err == io.EOF || err != nil {
		logger.Errorf("[category] HeartBeat Recv err:%v", err)
		return err
	}
	if err := msg.Validate(); err != nil {
		logger.Errorf("[category] HeartBeat Validate err:%v", err)
		return err
	}

	clientInfo := &stream.ClientInfo{
		ClientId:      stream.GetClientId(msg.Ip, msg.Port),
		RegisterCode:  msg.RegisterCode,
		SubscribeCode: msg.SubscribeCode,
	}

	c := stream.CreateSession(s, clientInfo.ClientId, clientInfo)
	stream.RunClient(c, msg)
	return nil
}
