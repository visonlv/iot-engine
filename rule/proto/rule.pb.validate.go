// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rule.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pk

	// no validation rules for Sn

	// no validation rules for Group

	// no validation rules for Rule

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on RuleAddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleAddReqMultiError, or
// nil if none found.
func (m *RuleAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RuleAddReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := RuleAddReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := RuleAddReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return RuleAddReqMultiError(errors)
	}

	return nil
}

// RuleAddReqMultiError is an error wrapping multiple validation errors
// returned by RuleAddReq.ValidateAll() if the designated constraints aren't met.
type RuleAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleAddReqMultiError) AllErrors() []error { return m }

// RuleAddReqValidationError is the validation error returned by
// RuleAddReq.Validate if the designated constraints aren't met.
type RuleAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleAddReqValidationError) ErrorName() string { return "RuleAddReqValidationError" }

// Error satisfies the builtin error interface
func (e RuleAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleAddReqValidationError{}

// Validate checks the field values on RuleAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleAddRespMultiError, or
// nil if none found.
func (m *RuleAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return RuleAddRespMultiError(errors)
	}

	return nil
}

// RuleAddRespMultiError is an error wrapping multiple validation errors
// returned by RuleAddResp.ValidateAll() if the designated constraints aren't met.
type RuleAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleAddRespMultiError) AllErrors() []error { return m }

// RuleAddRespValidationError is the validation error returned by
// RuleAddResp.Validate if the designated constraints aren't met.
type RuleAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleAddRespValidationError) ErrorName() string { return "RuleAddRespValidationError" }

// Error satisfies the builtin error interface
func (e RuleAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleAddRespValidationError{}

// Validate checks the field values on RuleDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleDelReqMultiError, or
// nil if none found.
func (m *RuleDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RuleDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RuleDelReqMultiError(errors)
	}

	return nil
}

// RuleDelReqMultiError is an error wrapping multiple validation errors
// returned by RuleDelReq.ValidateAll() if the designated constraints aren't met.
type RuleDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleDelReqMultiError) AllErrors() []error { return m }

// RuleDelReqValidationError is the validation error returned by
// RuleDelReq.Validate if the designated constraints aren't met.
type RuleDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleDelReqValidationError) ErrorName() string { return "RuleDelReqValidationError" }

// Error satisfies the builtin error interface
func (e RuleDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleDelReqValidationError{}

// Validate checks the field values on RuleDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleDelRespMultiError, or
// nil if none found.
func (m *RuleDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return RuleDelRespMultiError(errors)
	}

	return nil
}

// RuleDelRespMultiError is an error wrapping multiple validation errors
// returned by RuleDelResp.ValidateAll() if the designated constraints aren't met.
type RuleDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleDelRespMultiError) AllErrors() []error { return m }

// RuleDelRespValidationError is the validation error returned by
// RuleDelResp.Validate if the designated constraints aren't met.
type RuleDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleDelRespValidationError) ErrorName() string { return "RuleDelRespValidationError" }

// Error satisfies the builtin error interface
func (e RuleDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleDelRespValidationError{}

// Validate checks the field values on RuleUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleUpdateReqMultiError, or
// nil if none found.
func (m *RuleUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RuleUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := RuleUpdateReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := RuleUpdateReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return RuleUpdateReqMultiError(errors)
	}

	return nil
}

// RuleUpdateReqMultiError is an error wrapping multiple validation errors
// returned by RuleUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type RuleUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleUpdateReqMultiError) AllErrors() []error { return m }

// RuleUpdateReqValidationError is the validation error returned by
// RuleUpdateReq.Validate if the designated constraints aren't met.
type RuleUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleUpdateReqValidationError) ErrorName() string { return "RuleUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e RuleUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleUpdateReqValidationError{}

// Validate checks the field values on RuleUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleUpdateRespMultiError,
// or nil if none found.
func (m *RuleUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return RuleUpdateRespMultiError(errors)
	}

	return nil
}

// RuleUpdateRespMultiError is an error wrapping multiple validation errors
// returned by RuleUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type RuleUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleUpdateRespMultiError) AllErrors() []error { return m }

// RuleUpdateRespValidationError is the validation error returned by
// RuleUpdateResp.Validate if the designated constraints aren't met.
type RuleUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleUpdateRespValidationError) ErrorName() string { return "RuleUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e RuleUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleUpdateRespValidationError{}

// Validate checks the field values on RuleGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleGetReqMultiError, or
// nil if none found.
func (m *RuleGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RuleGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RuleGetReqMultiError(errors)
	}

	return nil
}

// RuleGetReqMultiError is an error wrapping multiple validation errors
// returned by RuleGetReq.ValidateAll() if the designated constraints aren't met.
type RuleGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleGetReqMultiError) AllErrors() []error { return m }

// RuleGetReqValidationError is the validation error returned by
// RuleGetReq.Validate if the designated constraints aren't met.
type RuleGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleGetReqValidationError) ErrorName() string { return "RuleGetReqValidationError" }

// Error satisfies the builtin error interface
func (e RuleGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleGetReqValidationError{}

// Validate checks the field values on RuleGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleGetRespMultiError, or
// nil if none found.
func (m *RuleGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuleGetRespMultiError(errors)
	}

	return nil
}

// RuleGetRespMultiError is an error wrapping multiple validation errors
// returned by RuleGetResp.ValidateAll() if the designated constraints aren't met.
type RuleGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleGetRespMultiError) AllErrors() []error { return m }

// RuleGetRespValidationError is the validation error returned by
// RuleGetResp.Validate if the designated constraints aren't met.
type RuleGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleGetRespValidationError) ErrorName() string { return "RuleGetRespValidationError" }

// Error satisfies the builtin error interface
func (e RuleGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleGetRespValidationError{}

// Validate checks the field values on RuleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleListReqMultiError, or
// nil if none found.
func (m *RuleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RuleListReqMultiError(errors)
	}

	return nil
}

// RuleListReqMultiError is an error wrapping multiple validation errors
// returned by RuleListReq.ValidateAll() if the designated constraints aren't met.
type RuleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleListReqMultiError) AllErrors() []error { return m }

// RuleListReqValidationError is the validation error returned by
// RuleListReq.Validate if the designated constraints aren't met.
type RuleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleListReqValidationError) ErrorName() string { return "RuleListReqValidationError" }

// Error satisfies the builtin error interface
func (e RuleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleListReqValidationError{}

// Validate checks the field values on RuleListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuleListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuleListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuleListRespMultiError, or
// nil if none found.
func (m *RuleListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RuleListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RuleListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RuleListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RuleListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RuleListRespMultiError(errors)
	}

	return nil
}

// RuleListRespMultiError is an error wrapping multiple validation errors
// returned by RuleListResp.ValidateAll() if the designated constraints aren't met.
type RuleListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleListRespMultiError) AllErrors() []error { return m }

// RuleListRespValidationError is the validation error returned by
// RuleListResp.Validate if the designated constraints aren't met.
type RuleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleListRespValidationError) ErrorName() string { return "RuleListRespValidationError" }

// Error satisfies the builtin error interface
func (e RuleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleListRespValidationError{}

// Validate checks the field values on RulePageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RulePageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RulePageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RulePageReqMultiError, or
// nil if none found.
func (m *RulePageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RulePageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := RulePageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RulePageReqMultiError(errors)
	}

	return nil
}

// RulePageReqMultiError is an error wrapping multiple validation errors
// returned by RulePageReq.ValidateAll() if the designated constraints aren't met.
type RulePageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RulePageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RulePageReqMultiError) AllErrors() []error { return m }

// RulePageReqValidationError is the validation error returned by
// RulePageReq.Validate if the designated constraints aren't met.
type RulePageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RulePageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RulePageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RulePageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RulePageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RulePageReqValidationError) ErrorName() string { return "RulePageReqValidationError" }

// Error satisfies the builtin error interface
func (e RulePageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRulePageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RulePageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RulePageReqValidationError{}

// Validate checks the field values on RulePageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RulePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RulePageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RulePageRespMultiError, or
// nil if none found.
func (m *RulePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RulePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RulePageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RulePageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RulePageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RulePageRespMultiError(errors)
	}

	return nil
}

// RulePageRespMultiError is an error wrapping multiple validation errors
// returned by RulePageResp.ValidateAll() if the designated constraints aren't met.
type RulePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RulePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RulePageRespMultiError) AllErrors() []error { return m }

// RulePageRespValidationError is the validation error returned by
// RulePageResp.Validate if the designated constraints aren't met.
type RulePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RulePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RulePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RulePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RulePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RulePageRespValidationError) ErrorName() string { return "RulePageRespValidationError" }

// Error satisfies the builtin error interface
func (e RulePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRulePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RulePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RulePageRespValidationError{}
