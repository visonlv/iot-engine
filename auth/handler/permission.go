// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/auth/handler/auth"
	"github.com/visonlv/iot-engine/auth/handler/convert"
	"github.com/visonlv/iot-engine/auth/model"
	pb "github.com/visonlv/iot-engine/auth/proto"
	"github.com/visonlv/iot-engine/auth/utils"
)

type PermissionService struct {
}

func (the *PermissionService) Page(ctx context.Context, req *pb.PermissionPageReq, resp *pb.PermissionPageResp) error {
	if req.RoleId != "" {
		_, err := model.RoleGet(nil, req.RoleId)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
	}

	if req.AppId != "" {
		_, err := model.AppGet(nil, req.AppId)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
	}

	items, total, err := model.PermissionInfoPage(nil, req.PageIndex, req.PageSize, req.RoleId, req.AppId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	for _, item := range items {
		pbItem := &pb.Permission{}
		utilsx.DeepCopy(item, pbItem)
		if pbItem.Resources != "" {
			pbItem.ResourcesJson, err = convert.ResourceStringsToJsons(pbItem.Resources, pbItem.ResourceType)
			if err != nil {
				pbItem.ResourcesJson = err.Error()
			}
		}
		pbItem.CreateTime = item.CreatedAt.UnixMilli()
		resp.List = append(resp.List, pbItem)
	}
	resp.Code = errorsx.OK.Code
	resp.Total = total
	return nil
}

func (the *PermissionService) Add(ctx context.Context, req *pb.PermissionAddReq, resp *pb.PermissionAddResp) error {
	_, exist, err := model.PermissionGetByInfo(nil, req.AppId, req.RoleId, req.ResourceType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if exist {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "该权限已存在，切勿重复配置"
		return nil
	}
	if req.AppId == "" && req.ResourceType != model.ResourceTypeApi {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "应用不能为空"
		return nil
	}
	err = model.PermissionAdd(nil, &model.PermissionModel{RoleId: req.RoleId, AppId: req.AppId, ResourceType: req.ResourceType, Resources: req.Resources})
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	//更新本地缓存
	auth.AuthObj.ResetAll()
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *PermissionService) Update(ctx context.Context, req *pb.PermissionUpdateReq, resp *pb.PermissionUpdateResp) error {
	item, err := model.PermissionGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if req.AppId == "" && item.ResourceType != model.ResourceTypeApi {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "应用不能为空"
		return nil
	}
	if item.AppId != req.AppId || item.RoleId != req.RoleId {
		_, exist, err := model.PermissionGetByInfo(nil, req.AppId, req.RoleId, item.ResourceType)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
		if exist {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "该权限配置已存在"
			return nil
		}
		item.AppId = req.AppId
		item.RoleId = req.RoleId
	}
	item.Resources = req.Resources
	_, err = model.PermissionUpdate(nil, item)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	//更新本地缓存
	auth.AuthObj.ResetAll()
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *PermissionService) Del(ctx context.Context, req *pb.PermissionDelReq, resp *pb.PermissionDelResp) error {
	err := model.PermissionDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	//更新本地缓存
	auth.AuthObj.ResetAll()
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *PermissionService) Get(ctx context.Context, req *pb.PermissionGetReq, resp *pb.PermissionGetResp) error {
	item, err := model.PermissionGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	role, err := model.RoleGet(nil, item.RoleId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	app, err := model.AppGet(nil, item.AppId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	resp.Item.AppId = item.AppId
	resp.Item.AppName = app.Name
	resp.Item.RoleId = role.Id
	resp.Item.RoleName = role.Rolename
	resp.Item.Id = item.Id
	resp.Item.Resources = item.Resources
	resp.Item.ResourceType = item.ResourceType
	resp.Item.CreateTime = item.CreatedAt.UnixMilli()
	return nil
}

func (the *PermissionService) GetMenu(ctx context.Context, req *pb.PermissionGetMenuReq, resp *pb.PermissionGetMenuResp) error {
	roleCode := utils.GetRoleCodeFromContext(ctx)
	if roleCode == "" {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "token解析不到角色代码"
		return nil
	}

	a, exist, err := model.AppGetByCode(nil, req.AppCode)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	if !exist {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "应用代码不存在"
		return nil
	}

	r, err := model.RoleGetByCode(nil, roleCode)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	m, err := model.PermissionGetByRoleIdAndAppIdAndResourceType(nil, r.Id, a.Id, model.ResourceTypeMenu)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	resourcesJson, err := convert.ResourceStringsToJsons(m.Resources, m.ResourceType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Menu = resourcesJson
	return nil
}
