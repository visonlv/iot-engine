// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/iot-engine/auth/handler/auth"
	"github.com/visonlv/iot-engine/auth/model"
	pb "github.com/visonlv/iot-engine/auth/proto"
	"github.com/visonlv/iot-engine/auth/utils"
)

type ApiWhiteListService struct {
}

func (the *ApiWhiteListService) Refresh(ctx context.Context, req *pb.ApiWhiteListRefreshReq, resp *pb.ApiWhiteListRefreshResp) error {
	auth.AuthObj.ResetWhiteList()
	resp.Code = errorsx.OK.Code
	resp.Msg = "success"
	return nil
}

func (the *ApiWhiteListService) Add(ctx context.Context, req *pb.ApiWhiteListAddReq, resp *pb.ApiWhiteListAddResp) error {
	userid := utils.GetUserIdFromContext(ctx)
	_, exist, err := model.ApiWhiteListGetByPath(nil, req.Path)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加白名单失败：" + err.Error()
		return nil
	}
	if exist {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加白名单失败：该接口已存在白名单中！"
		return nil
	}
	m := &model.ApiWhiteListModel{
		Name:       req.Name,
		Path:       req.Path,
		CreateUser: userid}
	err = model.ApiWhiteListAdd(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加白名单失败：" + err.Error()
		return nil
	}
	auth.AuthObj.ResetWhiteList()
	resp.Code = errorsx.OK.Code
	resp.Id = m.Id
	return nil
}

func (the *ApiWhiteListService) Update(ctx context.Context, req *pb.ApiWhiteListUpdateReq, resp *pb.ApiWhiteListUpdateResp) error {
	userid := utils.GetUserIdFromContext(ctx)
	item, err := model.ApiWhiteListGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "更新白名单失败：" + err.Error()
		return nil
	}
	if item.Path != req.Path {
		_, exist, err := model.ApiWhiteListGetByPath(nil, req.Path)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "更新白名单失败：" + err.Error()
			return nil
		}
		if exist {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "更新白名单失败：接口路径已经存在"
			return nil
		}
	}

	item.Name = req.Name
	item.Path = req.Path
	item.UpdateUser = userid
	_, err = model.ApiWhiteListUpdate(nil, item)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "更新白名单失败：" + err.Error()
		return nil
	}
	if item.Path != req.Path {
		auth.AuthObj.ResetWhiteList()
	}
	resp.Code = errorsx.OK.Code
	resp.Id = item.Id
	return nil
}

func (the *ApiWhiteListService) Del(ctx context.Context, req *pb.ApiWhiteListDelReq, resp *pb.ApiWhiteListDelResp) error {
	err := model.ApiWhiteListDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "删除白名单失败：" + err.Error()
		return nil
	}
	auth.AuthObj.ResetWhiteList()
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *ApiWhiteListService) Page(ctx context.Context, req *pb.ApiWhiteListPageReq, resp *pb.ApiWhiteListPageResp) error {
	list, total, err := model.ApiWhiteListPage(nil, req.PageIndex, req.PageSize, req.Name)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "查询白名单列表失败：" + err.Error()
		return nil
	}
	for _, item := range list {
		resp.List = append(resp.List, &pb.ApiWhiteList{
			Id:             item.Id,
			Name:           item.Name,
			Path:           item.Path,
			CreateTime:     item.CreatedAt.UnixMilli(),
			CreateUsername: model.UserNameFromCache(nil, item.CreateUser),
		})
	}
	resp.Total = total
	resp.Code = errorsx.OK.Code
	return nil
}
