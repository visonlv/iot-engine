// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/auth/handler/auth"
	"github.com/visonlv/iot-engine/auth/model"
	pb "github.com/visonlv/iot-engine/auth/proto"
)

type ResourceService struct {
}

func (the *ResourceService) Add(ctx context.Context, req *pb.AddResourceReq, resp *pb.AddResourceResp) error {
	_, exist, err := model.ResourceGetByNameAndType(nil, req.Name, req.Type)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if exist {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "该资源已存在，切勿重复添加"
		return nil
	}
	item := &model.ResourceModel{
		Name:    req.Name,
		Type:    req.Type,
		Content: req.Content,
	}
	err = model.ResourceAdd(nil, item)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	return nil
}

func (the *ResourceService) Update(ctx context.Context, req *pb.UpdateResourceReq, resp *pb.Response) error {
	res, err := model.ResourceGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if req.Content != res.Content {
		res.Content = req.Content
	}
	if res.Name != req.Name {
		m, exist, err := model.ResourceGetByNameAndType(nil, req.Name, res.Type)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
		if exist && m.Id != req.Id {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "资源名称已存在"
			return nil
		}
		res.Name = req.Name
	}
	_, err = model.ResourceUpdate(nil, res)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	if req.Content != res.Content {
		if ok, _ := model.PermissionExistByResourceId(nil, res.Id); ok {
			//更新本地缓存
			auth.AuthObj.ResetAll()
		}
	}
	return nil
}

func (the *ResourceService) Del(ctx context.Context, req *pb.Request, resp *pb.Response) error {
	ok, err := model.PermissionExistByResourceId(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if ok {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "资源跟权限存在绑定，不可以删除"
		return nil
	}

	err = model.ResourceDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *ResourceService) Get(ctx context.Context, req *pb.Request, resp *pb.ResourceGetResp) error {
	m, err := model.ResourceGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	item := &pb.Resource{}
	utilsx.DeepCopy(m, item)
	item.CreateTime = m.CreatedAt.UnixMilli()
	item.UpdateTime = m.UpdatedAt.UnixMilli()
	resp.Code = errorsx.OK.Code
	resp.Item = item
	return nil
}

func (the *ResourceService) Page(ctx context.Context, req *pb.ResourcePageReq, resp *pb.ResourcePageResp) error {
	list, total, err := model.ResourcePage(nil, req.PageIndex, req.PageSize, req.Name, req.Type, req.Content)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	for _, res := range list {
		item := &pb.Resource{}
		err := utilsx.DeepCopy(res, item)
		if err != nil {
			fmt.Println("err:", err.Error())
		}
		item.CreateTime = res.CreatedAt.UnixMilli()
		item.UpdateTime = res.UpdatedAt.UnixMilli()
		resp.List = append(resp.List, item)
	}
	resp.Code = errorsx.OK.Code
	resp.Total = total
	return nil
}

func (the *ResourceService) RuleType(ctx context.Context, req *pb.ResourceRuleTypeReq, resp *pb.ResourceRuleTypeResp) error {
	resp.Code = errorsx.OK.Code
	resp.List = []string{"bool", "int", "float", "string"}
	return nil
}
