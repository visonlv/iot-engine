// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"

	pb "github.com/visonlv/iot-engine/auth/proto"
	"github.com/visonlv/iot-engine/auth/utils"

	"github.com/visonlv/iot-engine/auth/model"

	"github.com/visonlv/iot-engine/auth/handler/auth"
	"github.com/visonlv/iot-engine/auth/handler/convert"

	"github.com/visonlv/go-vkit/errorsx"
)

type RoleService struct {
}

func (the *RoleService) Page(ctx context.Context, req *pb.RolePageReq, resp *pb.RolePageResp) error {
	roles, total, err := model.RolePage(nil, req.PageIndex, req.PageSize, req.Name)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "获取角色列表失败:" + err.Error()
		return nil
	}
	for _, role := range roles {
		creater := model.UserNameFromCache(nil, role.CreateUser)
		resp.List = append(resp.List, &pb.Role{
			Id:             role.Id,
			Name:           role.Rolename,
			Code:           role.Code,
			CreateUser:     role.CreateUser,
			CreateUsername: creater,
			CreateTime:     role.CreatedAt.UnixMilli(),
		})
	}
	resp.Total = total
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *RoleService) ListByCode(ctx context.Context, req *pb.RoleListByCodeReq, resp *pb.RoleListByCodeResp) error {
	if len(req.RoleCodes) == 0 {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "角色代码不能为空"
		return nil
	}
	roles, err := model.RoleListByCodes(nil, req.RoleCodes)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "查询角色失败：" + err.Error()
		return nil
	}
	for _, role := range roles {
		resp.Items = append(resp.Items, &pb.Role{
			Id:   role.Id,
			Name: role.Rolename,
			Code: role.Code,
		})
	}
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *RoleService) Add(ctx context.Context, req *pb.RoleAddReq, resp *pb.RoleAddResp) error {
	userid := utils.GetUserIdFromContext(ctx)
	//判断code是否唯一
	has, err := model.RoleIsExist(nil, req.Code)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if has {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "该角色代码已存在"
		return nil
	}
	exist, err := model.RoleNameIsExist(nil, req.Name)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if exist {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "角色名字已存在"
		return nil
	}
	r := &model.RoleModel{
		Rolename:   req.Name,
		Code:       req.Code,
		CreateUser: userid,
	}
	err = model.RoleAdd(nil, r)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	resp.Id = r.Id
	return nil
}

func (the *RoleService) Del(ctx context.Context, req *pb.RoleDelReq, resp *pb.RoleDelResp) error {
	count, err := model.PermissionCountByRoleId(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "查询失败:" + err.Error()
		return nil
	}
	if count > 0 {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "该角色存在绑定的权限"
		return nil
	}

	err = model.RoleDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *RoleService) Update(ctx context.Context, req *pb.RoleUpdateReq, resp *pb.RoleUpdateResp) error {
	item, err := model.RoleGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if item.Rolename != req.Name {
		exist, err := model.RoleNameIsExist(nil, req.Name)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
		if exist {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "角色名字已存在"
			return nil
		}
		item.Rolename = req.Name
	}

	if req.Code != item.Code {
		exist, err := model.RoleIsExist(nil, req.Code)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = err.Error()
			return nil
		}
		if exist {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = "角色标识已存在"
			return nil
		}
		item.Code = req.Code
	}
	_, err = model.RoleUpdate(nil, item)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *RoleService) Get(ctx context.Context, req *pb.RoleGetReq, resp *pb.RoleGetResp) error {
	role, err := model.RoleGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	r, err := convert.RoleToPbRole(role)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	resp.Role = r
	resp.Code = errorsx.OK.Code
	return nil
}

func (the *RoleService) List(ctx context.Context, req *pb.RoleListReq, resp *pb.RoleListResp) error {

	codes := auth.RoleCodesByAppCode(req.AppCode)
	roles, err := model.RoleListByCodes(nil, codes)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "查询角色列表失败:" + err.Error()
		return nil
	}
	for _, role := range roles {
		creater := model.UserNameFromCache(nil, role.CreateUser)
		resp.Items = append(resp.Items, &pb.Role{
			Id:             role.Id,
			Name:           role.Rolename,
			Code:           role.Code,
			CreateUser:     role.CreateUser,
			CreateUsername: creater,
			CreateTime:     role.CreatedAt.UnixMilli(),
		})
	}
	resp.Code = errorsx.OK.Code
	return nil
}
