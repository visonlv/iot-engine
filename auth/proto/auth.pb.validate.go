// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccount()) < 1 {
		err := LoginReqValidationError{
			field:  "Account",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleCode

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := LoginReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Expiry

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LoginByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPhoneReqMultiError, or nil if none found.
func (m *LoginByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhone()) < 1 {
		err := LoginByPhoneReqValidationError{
			field:  "Phone",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerifyCode()) < 1 {
		err := LoginByPhoneReqValidationError{
			field:  "VerifyCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := LoginByPhoneReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleCode

	// no validation rules for Expiry

	if len(errors) > 0 {
		return LoginByPhoneReqMultiError(errors)
	}

	return nil
}

// LoginByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPhoneReqMultiError) AllErrors() []error { return m }

// LoginByPhoneReqValidationError is the validation error returned by
// LoginByPhoneReq.Validate if the designated constraints aren't met.
type LoginByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPhoneReqValidationError) ErrorName() string { return "LoginByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPhoneReqValidationError{}

// Validate checks the field values on LoginByPhoneResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByPhoneResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPhoneResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPhoneRespMultiError, or nil if none found.
func (m *LoginByPhoneResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPhoneResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginByPhoneRespMultiError(errors)
	}

	return nil
}

// LoginByPhoneRespMultiError is an error wrapping multiple validation errors
// returned by LoginByPhoneResp.ValidateAll() if the designated constraints
// aren't met.
type LoginByPhoneRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPhoneRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPhoneRespMultiError) AllErrors() []error { return m }

// LoginByPhoneRespValidationError is the validation error returned by
// LoginByPhoneResp.Validate if the designated constraints aren't met.
type LoginByPhoneRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPhoneRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPhoneRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPhoneRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPhoneRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPhoneRespValidationError) ErrorName() string { return "LoginByPhoneRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginByPhoneRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPhoneResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPhoneRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPhoneRespValidationError{}

// Validate checks the field values on LoginByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailReqMultiError, or nil if none found.
func (m *LoginByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LoginByEmailReqValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginByEmailReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := LoginByEmailReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleCode

	// no validation rules for Expiry

	if len(errors) > 0 {
		return LoginByEmailReqMultiError(errors)
	}

	return nil
}

// LoginByEmailReqMultiError is an error wrapping multiple validation errors
// returned by LoginByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailReqMultiError) AllErrors() []error { return m }

// LoginByEmailReqValidationError is the validation error returned by
// LoginByEmailReq.Validate if the designated constraints aren't met.
type LoginByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailReqValidationError) ErrorName() string { return "LoginByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailReqValidationError{}

// Validate checks the field values on LoginByEmailResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailRespMultiError, or nil if none found.
func (m *LoginByEmailResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginByEmailRespMultiError(errors)
	}

	return nil
}

// LoginByEmailRespMultiError is an error wrapping multiple validation errors
// returned by LoginByEmailResp.ValidateAll() if the designated constraints
// aren't met.
type LoginByEmailRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailRespMultiError) AllErrors() []error { return m }

// LoginByEmailRespValidationError is the validation error returned by
// LoginByEmailResp.Validate if the designated constraints aren't met.
type LoginByEmailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailRespValidationError) ErrorName() string { return "LoginByEmailRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginByEmailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on VerificationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerificationCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerificationCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerificationCodeReqMultiError, or nil if none found.
func (m *VerificationCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerificationCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetObject()) < 1 {
		err := VerificationCodeReqValidationError{
			field:  "Object",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := VerificationCodeReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerificationCodeReqMultiError(errors)
	}

	return nil
}

// VerificationCodeReqMultiError is an error wrapping multiple validation
// errors returned by VerificationCodeReq.ValidateAll() if the designated
// constraints aren't met.
type VerificationCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerificationCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerificationCodeReqMultiError) AllErrors() []error { return m }

// VerificationCodeReqValidationError is the validation error returned by
// VerificationCodeReq.Validate if the designated constraints aren't met.
type VerificationCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationCodeReqValidationError) ErrorName() string {
	return "VerificationCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerificationCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationCodeReqValidationError{}

// Validate checks the field values on ForgetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForgetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgetPasswordReqMultiError, or nil if none found.
func (m *ForgetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := ForgetPasswordReqValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerificationCode()) < 1 {
		err := ForgetPasswordReqValidationError{
			field:  "VerificationCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := ForgetPasswordReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ForgetPasswordReqMultiError(errors)
	}

	return nil
}

// ForgetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ForgetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ForgetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgetPasswordReqMultiError) AllErrors() []error { return m }

// ForgetPasswordReqValidationError is the validation error returned by
// ForgetPasswordReq.Validate if the designated constraints aren't met.
type ForgetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordReqValidationError) ErrorName() string {
	return "ForgetPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordReqValidationError{}

// Validate checks the field values on ForgetPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgetPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgetPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgetPasswordRespMultiError, or nil if none found.
func (m *ForgetPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgetPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ForgetPasswordRespMultiError(errors)
	}

	return nil
}

// ForgetPasswordRespMultiError is an error wrapping multiple validation errors
// returned by ForgetPasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ForgetPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgetPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgetPasswordRespMultiError) AllErrors() []error { return m }

// ForgetPasswordRespValidationError is the validation error returned by
// ForgetPasswordResp.Validate if the designated constraints aren't met.
type ForgetPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgetPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgetPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgetPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgetPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgetPasswordRespValidationError) ErrorName() string {
	return "ForgetPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForgetPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgetPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgetPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgetPasswordRespValidationError{}

// Validate checks the field values on VerifyPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordReqMultiError, or nil if none found.
func (m *VerifyPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := VerifyPasswordReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := VerifyPasswordReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyPasswordReqMultiError(errors)
	}

	return nil
}

// VerifyPasswordReqMultiError is an error wrapping multiple validation errors
// returned by VerifyPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordReqMultiError) AllErrors() []error { return m }

// VerifyPasswordReqValidationError is the validation error returned by
// VerifyPasswordReq.Validate if the designated constraints aren't met.
type VerifyPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordReqValidationError) ErrorName() string {
	return "VerifyPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordReqValidationError{}

// Validate checks the field values on VerifyPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyPasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyPasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyPasswordRespMultiError, or nil if none found.
func (m *VerifyPasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyPasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return VerifyPasswordRespMultiError(errors)
	}

	return nil
}

// VerifyPasswordRespMultiError is an error wrapping multiple validation errors
// returned by VerifyPasswordResp.ValidateAll() if the designated constraints
// aren't met.
type VerifyPasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyPasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyPasswordRespMultiError) AllErrors() []error { return m }

// VerifyPasswordRespValidationError is the validation error returned by
// VerifyPasswordResp.Validate if the designated constraints aren't met.
type VerifyPasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPasswordRespValidationError) ErrorName() string {
	return "VerifyPasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPasswordRespValidationError{}

// Validate checks the field values on GenTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenTokenReqMultiError, or
// nil if none found.
func (m *GenTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GenTokenReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRoleCode()) < 1 {
		err := GenTokenReqValidationError{
			field:  "RoleCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := GenTokenReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Expiry

	if len(errors) > 0 {
		return GenTokenReqMultiError(errors)
	}

	return nil
}

// GenTokenReqMultiError is an error wrapping multiple validation errors
// returned by GenTokenReq.ValidateAll() if the designated constraints aren't met.
type GenTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenTokenReqMultiError) AllErrors() []error { return m }

// GenTokenReqValidationError is the validation error returned by
// GenTokenReq.Validate if the designated constraints aren't met.
type GenTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenTokenReqValidationError) ErrorName() string { return "GenTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GenTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenTokenReqValidationError{}

// Validate checks the field values on GenTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenTokenRespMultiError, or
// nil if none found.
func (m *GenTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Token

	if len(errors) > 0 {
		return GenTokenRespMultiError(errors)
	}

	return nil
}

// GenTokenRespMultiError is an error wrapping multiple validation errors
// returned by GenTokenResp.ValidateAll() if the designated constraints aren't met.
type GenTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenTokenRespMultiError) AllErrors() []error { return m }

// GenTokenRespValidationError is the validation error returned by
// GenTokenResp.Validate if the designated constraints aren't met.
type GenTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenTokenRespValidationError) ErrorName() string { return "GenTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e GenTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenTokenRespValidationError{}

// Validate checks the field values on InspectReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InspectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InspectReqMultiError, or
// nil if none found.
func (m *InspectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := InspectReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InspectReqMultiError(errors)
	}

	return nil
}

// InspectReqMultiError is an error wrapping multiple validation errors
// returned by InspectReq.ValidateAll() if the designated constraints aren't met.
type InspectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectReqMultiError) AllErrors() []error { return m }

// InspectReqValidationError is the validation error returned by
// InspectReq.Validate if the designated constraints aren't met.
type InspectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectReqValidationError) ErrorName() string { return "InspectReqValidationError" }

// Error satisfies the builtin error interface
func (e InspectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectReqValidationError{}

// Validate checks the field values on InspectResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InspectResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InspectRespMultiError, or
// nil if none found.
func (m *InspectResp) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for AppCode

	// no validation rules for IsExist

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InspectRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InspectRespValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InspectRespValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InspectRespMultiError(errors)
	}

	return nil
}

// InspectRespMultiError is an error wrapping multiple validation errors
// returned by InspectResp.ValidateAll() if the designated constraints aren't met.
type InspectRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectRespMultiError) AllErrors() []error { return m }

// InspectRespValidationError is the validation error returned by
// InspectResp.Validate if the designated constraints aren't met.
type InspectRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectRespValidationError) ErrorName() string { return "InspectRespValidationError" }

// Error satisfies the builtin error interface
func (e InspectRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectRespValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := RefreshTokenReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on RefreshTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRespMultiError, or nil if none found.
func (m *RefreshTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Token

	if len(errors) > 0 {
		return RefreshTokenRespMultiError(errors)
	}

	return nil
}

// RefreshTokenRespMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenResp.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRespMultiError) AllErrors() []error { return m }

// RefreshTokenRespValidationError is the validation error returned by
// RefreshTokenResp.Validate if the designated constraints aren't met.
type RefreshTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRespValidationError) ErrorName() string { return "RefreshTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRespValidationError{}

// Validate checks the field values on DelTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelTokenReqMultiError, or
// nil if none found.
func (m *DelTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := DelTokenReqValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleCode

	// no validation rules for AppCode

	// no validation rules for Token

	if len(errors) > 0 {
		return DelTokenReqMultiError(errors)
	}

	return nil
}

// DelTokenReqMultiError is an error wrapping multiple validation errors
// returned by DelTokenReq.ValidateAll() if the designated constraints aren't met.
type DelTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelTokenReqMultiError) AllErrors() []error { return m }

// DelTokenReqValidationError is the validation error returned by
// DelTokenReq.Validate if the designated constraints aren't met.
type DelTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelTokenReqValidationError) ErrorName() string { return "DelTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e DelTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelTokenReqValidationError{}

// Validate checks the field values on DelTokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelTokenRespMultiError, or
// nil if none found.
func (m *DelTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return DelTokenRespMultiError(errors)
	}

	return nil
}

// DelTokenRespMultiError is an error wrapping multiple validation errors
// returned by DelTokenResp.ValidateAll() if the designated constraints aren't met.
type DelTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelTokenRespMultiError) AllErrors() []error { return m }

// DelTokenRespValidationError is the validation error returned by
// DelTokenResp.Validate if the designated constraints aren't met.
type DelTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelTokenRespValidationError) ErrorName() string { return "DelTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e DelTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelTokenRespValidationError{}

// Validate checks the field values on APIPermissionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *APIPermissionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIPermissionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIPermissionsReqMultiError, or nil if none found.
func (m *APIPermissionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *APIPermissionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if utf8.RuneCountInString(m.GetApi()) < 1 {
		err := APIPermissionsReqValidationError{
			field:  "Api",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return APIPermissionsReqMultiError(errors)
	}

	return nil
}

// APIPermissionsReqMultiError is an error wrapping multiple validation errors
// returned by APIPermissionsReq.ValidateAll() if the designated constraints
// aren't met.
type APIPermissionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIPermissionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIPermissionsReqMultiError) AllErrors() []error { return m }

// APIPermissionsReqValidationError is the validation error returned by
// APIPermissionsReq.Validate if the designated constraints aren't met.
type APIPermissionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIPermissionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIPermissionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIPermissionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIPermissionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIPermissionsReqValidationError) ErrorName() string {
	return "APIPermissionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e APIPermissionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIPermissionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIPermissionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIPermissionsReqValidationError{}

// Validate checks the field values on APIPermissionsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APIPermissionsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APIPermissionsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APIPermissionsRespMultiError, or nil if none found.
func (m *APIPermissionsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *APIPermissionsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Enable

	// no validation rules for UserId

	// no validation rules for AppCode

	// no validation rules for HttpStatus

	// no validation rules for IsWhite

	if len(errors) > 0 {
		return APIPermissionsRespMultiError(errors)
	}

	return nil
}

// APIPermissionsRespMultiError is an error wrapping multiple validation errors
// returned by APIPermissionsResp.ValidateAll() if the designated constraints
// aren't met.
type APIPermissionsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APIPermissionsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APIPermissionsRespMultiError) AllErrors() []error { return m }

// APIPermissionsRespValidationError is the validation error returned by
// APIPermissionsResp.Validate if the designated constraints aren't met.
type APIPermissionsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APIPermissionsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APIPermissionsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APIPermissionsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APIPermissionsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APIPermissionsRespValidationError) ErrorName() string {
	return "APIPermissionsRespValidationError"
}

// Error satisfies the builtin error interface
func (e APIPermissionsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPIPermissionsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APIPermissionsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APIPermissionsRespValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Describe

	// no validation rules for CreateUser

	// no validation rules for CreateUsername

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on AppPageReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppPageReqMultiError, or
// nil if none found.
func (m *AppPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := AppPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return AppPageReqMultiError(errors)
	}

	return nil
}

// AppPageReqMultiError is an error wrapping multiple validation errors
// returned by AppPageReq.ValidateAll() if the designated constraints aren't met.
type AppPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppPageReqMultiError) AllErrors() []error { return m }

// AppPageReqValidationError is the validation error returned by
// AppPageReq.Validate if the designated constraints aren't met.
type AppPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppPageReqValidationError) ErrorName() string { return "AppPageReqValidationError" }

// Error satisfies the builtin error interface
func (e AppPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppPageReqValidationError{}

// Validate checks the field values on AppPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppPageRespMultiError, or
// nil if none found.
func (m *AppPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppPageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppPageRespMultiError(errors)
	}

	return nil
}

// AppPageRespMultiError is an error wrapping multiple validation errors
// returned by AppPageResp.ValidateAll() if the designated constraints aren't met.
type AppPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppPageRespMultiError) AllErrors() []error { return m }

// AppPageRespValidationError is the validation error returned by
// AppPageResp.Validate if the designated constraints aren't met.
type AppPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppPageRespValidationError) ErrorName() string { return "AppPageRespValidationError" }

// Error satisfies the builtin error interface
func (e AppPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppPageRespValidationError{}

// Validate checks the field values on AppAddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppAddReqMultiError, or nil
// if none found.
func (m *AppAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AppAddReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AppAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return AppAddReqMultiError(errors)
	}

	return nil
}

// AppAddReqMultiError is an error wrapping multiple validation errors returned
// by AppAddReq.ValidateAll() if the designated constraints aren't met.
type AppAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppAddReqMultiError) AllErrors() []error { return m }

// AppAddReqValidationError is the validation error returned by
// AppAddReq.Validate if the designated constraints aren't met.
type AppAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppAddReqValidationError) ErrorName() string { return "AppAddReqValidationError" }

// Error satisfies the builtin error interface
func (e AppAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppAddReqValidationError{}

// Validate checks the field values on AppAddResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppAddRespMultiError, or
// nil if none found.
func (m *AppAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return AppAddRespMultiError(errors)
	}

	return nil
}

// AppAddRespMultiError is an error wrapping multiple validation errors
// returned by AppAddResp.ValidateAll() if the designated constraints aren't met.
type AppAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppAddRespMultiError) AllErrors() []error { return m }

// AppAddRespValidationError is the validation error returned by
// AppAddResp.Validate if the designated constraints aren't met.
type AppAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppAddRespValidationError) ErrorName() string { return "AppAddRespValidationError" }

// Error satisfies the builtin error interface
func (e AppAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppAddRespValidationError{}

// Validate checks the field values on AppDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppDelReqMultiError, or nil
// if none found.
func (m *AppDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AppDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppDelReqMultiError(errors)
	}

	return nil
}

// AppDelReqMultiError is an error wrapping multiple validation errors returned
// by AppDelReq.ValidateAll() if the designated constraints aren't met.
type AppDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDelReqMultiError) AllErrors() []error { return m }

// AppDelReqValidationError is the validation error returned by
// AppDelReq.Validate if the designated constraints aren't met.
type AppDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDelReqValidationError) ErrorName() string { return "AppDelReqValidationError" }

// Error satisfies the builtin error interface
func (e AppDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDelReqValidationError{}

// Validate checks the field values on AppDelResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppDelRespMultiError, or
// nil if none found.
func (m *AppDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AppDelRespMultiError(errors)
	}

	return nil
}

// AppDelRespMultiError is an error wrapping multiple validation errors
// returned by AppDelResp.ValidateAll() if the designated constraints aren't met.
type AppDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppDelRespMultiError) AllErrors() []error { return m }

// AppDelRespValidationError is the validation error returned by
// AppDelResp.Validate if the designated constraints aren't met.
type AppDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppDelRespValidationError) ErrorName() string { return "AppDelRespValidationError" }

// Error satisfies the builtin error interface
func (e AppDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppDelRespValidationError{}

// Validate checks the field values on AppUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppUpdateReqMultiError, or
// nil if none found.
func (m *AppUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AppUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AppUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := AppUpdateReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return AppUpdateReqMultiError(errors)
	}

	return nil
}

// AppUpdateReqMultiError is an error wrapping multiple validation errors
// returned by AppUpdateReq.ValidateAll() if the designated constraints aren't met.
type AppUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppUpdateReqMultiError) AllErrors() []error { return m }

// AppUpdateReqValidationError is the validation error returned by
// AppUpdateReq.Validate if the designated constraints aren't met.
type AppUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppUpdateReqValidationError) ErrorName() string { return "AppUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e AppUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppUpdateReqValidationError{}

// Validate checks the field values on AppUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppUpdateRespMultiError, or
// nil if none found.
func (m *AppUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AppUpdateRespMultiError(errors)
	}

	return nil
}

// AppUpdateRespMultiError is an error wrapping multiple validation errors
// returned by AppUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type AppUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppUpdateRespMultiError) AllErrors() []error { return m }

// AppUpdateRespValidationError is the validation error returned by
// AppUpdateResp.Validate if the designated constraints aren't met.
type AppUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppUpdateRespValidationError) ErrorName() string { return "AppUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e AppUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppUpdateRespValidationError{}

// Validate checks the field values on AppGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppGetReqMultiError, or nil
// if none found.
func (m *AppGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AppGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AppGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppGetReqMultiError(errors)
	}

	return nil
}

// AppGetReqMultiError is an error wrapping multiple validation errors returned
// by AppGetReq.ValidateAll() if the designated constraints aren't met.
type AppGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppGetReqMultiError) AllErrors() []error { return m }

// AppGetReqValidationError is the validation error returned by
// AppGetReq.Validate if the designated constraints aren't met.
type AppGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppGetReqValidationError) ErrorName() string { return "AppGetReqValidationError" }

// Error satisfies the builtin error interface
func (e AppGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppGetReqValidationError{}

// Validate checks the field values on AppGetResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppGetRespMultiError, or
// nil if none found.
func (m *AppGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AppGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppGetRespValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppGetRespValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppGetRespValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppGetRespMultiError(errors)
	}

	return nil
}

// AppGetRespMultiError is an error wrapping multiple validation errors
// returned by AppGetResp.ValidateAll() if the designated constraints aren't met.
type AppGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppGetRespMultiError) AllErrors() []error { return m }

// AppGetRespValidationError is the validation error returned by
// AppGetResp.Validate if the designated constraints aren't met.
type AppGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppGetRespValidationError) ErrorName() string { return "AppGetRespValidationError" }

// Error satisfies the builtin error interface
func (e AppGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppGetRespValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for CreateUser

	// no validation rules for CreateUsername

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on RoleAddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAddReqMultiError, or
// nil if none found.
func (m *RoleAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := RoleAddReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RoleAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleAddReqMultiError(errors)
	}

	return nil
}

// RoleAddReqMultiError is an error wrapping multiple validation errors
// returned by RoleAddReq.ValidateAll() if the designated constraints aren't met.
type RoleAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAddReqMultiError) AllErrors() []error { return m }

// RoleAddReqValidationError is the validation error returned by
// RoleAddReq.Validate if the designated constraints aren't met.
type RoleAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAddReqValidationError) ErrorName() string { return "RoleAddReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAddReqValidationError{}

// Validate checks the field values on RoleAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAddRespMultiError, or
// nil if none found.
func (m *RoleAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleAddRespMultiError(errors)
	}

	return nil
}

// RoleAddRespMultiError is an error wrapping multiple validation errors
// returned by RoleAddResp.ValidateAll() if the designated constraints aren't met.
type RoleAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAddRespMultiError) AllErrors() []error { return m }

// RoleAddRespValidationError is the validation error returned by
// RoleAddResp.Validate if the designated constraints aren't met.
type RoleAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAddRespValidationError) ErrorName() string { return "RoleAddRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAddRespValidationError{}

// Validate checks the field values on RoleDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDelReqMultiError, or
// nil if none found.
func (m *RoleDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RoleDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleDelReqMultiError(errors)
	}

	return nil
}

// RoleDelReqMultiError is an error wrapping multiple validation errors
// returned by RoleDelReq.ValidateAll() if the designated constraints aren't met.
type RoleDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDelReqMultiError) AllErrors() []error { return m }

// RoleDelReqValidationError is the validation error returned by
// RoleDelReq.Validate if the designated constraints aren't met.
type RoleDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDelReqValidationError) ErrorName() string { return "RoleDelReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDelReqValidationError{}

// Validate checks the field values on RoleDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDelRespMultiError, or
// nil if none found.
func (m *RoleDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return RoleDelRespMultiError(errors)
	}

	return nil
}

// RoleDelRespMultiError is an error wrapping multiple validation errors
// returned by RoleDelResp.ValidateAll() if the designated constraints aren't met.
type RoleDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDelRespMultiError) AllErrors() []error { return m }

// RoleDelRespValidationError is the validation error returned by
// RoleDelResp.Validate if the designated constraints aren't met.
type RoleDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDelRespValidationError) ErrorName() string { return "RoleDelRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDelRespValidationError{}

// Validate checks the field values on RoleUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleUpdateReqMultiError, or
// nil if none found.
func (m *RoleUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RoleUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RoleUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := RoleUpdateReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleUpdateReqMultiError(errors)
	}

	return nil
}

// RoleUpdateReqMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateReqMultiError) AllErrors() []error { return m }

// RoleUpdateReqValidationError is the validation error returned by
// RoleUpdateReq.Validate if the designated constraints aren't met.
type RoleUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateReqValidationError) ErrorName() string { return "RoleUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateReqValidationError{}

// Validate checks the field values on RoleUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleUpdateRespMultiError,
// or nil if none found.
func (m *RoleUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return RoleUpdateRespMultiError(errors)
	}

	return nil
}

// RoleUpdateRespMultiError is an error wrapping multiple validation errors
// returned by RoleUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type RoleUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleUpdateRespMultiError) AllErrors() []error { return m }

// RoleUpdateRespValidationError is the validation error returned by
// RoleUpdateResp.Validate if the designated constraints aren't met.
type RoleUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleUpdateRespValidationError) ErrorName() string { return "RoleUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleUpdateRespValidationError{}

// Validate checks the field values on RoleGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetReqMultiError, or
// nil if none found.
func (m *RoleGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := RoleGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleGetReqMultiError(errors)
	}

	return nil
}

// RoleGetReqMultiError is an error wrapping multiple validation errors
// returned by RoleGetReq.ValidateAll() if the designated constraints aren't met.
type RoleGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetReqMultiError) AllErrors() []error { return m }

// RoleGetReqValidationError is the validation error returned by
// RoleGetReq.Validate if the designated constraints aren't met.
type RoleGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetReqValidationError) ErrorName() string { return "RoleGetReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetReqValidationError{}

// Validate checks the field values on RoleGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleGetRespMultiError, or
// nil if none found.
func (m *RoleGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleGetRespValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleGetRespValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleGetRespValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleGetRespMultiError(errors)
	}

	return nil
}

// RoleGetRespMultiError is an error wrapping multiple validation errors
// returned by RoleGetResp.ValidateAll() if the designated constraints aren't met.
type RoleGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleGetRespMultiError) AllErrors() []error { return m }

// RoleGetRespValidationError is the validation error returned by
// RoleGetResp.Validate if the designated constraints aren't met.
type RoleGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleGetRespValidationError) ErrorName() string { return "RoleGetRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleGetRespValidationError{}

// Validate checks the field values on RoleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleListReqMultiError, or
// nil if none found.
func (m *RoleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := RoleListReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleListReqMultiError(errors)
	}

	return nil
}

// RoleListReqMultiError is an error wrapping multiple validation errors
// returned by RoleListReq.ValidateAll() if the designated constraints aren't met.
type RoleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListReqMultiError) AllErrors() []error { return m }

// RoleListReqValidationError is the validation error returned by
// RoleListReq.Validate if the designated constraints aren't met.
type RoleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListReqValidationError) ErrorName() string { return "RoleListReqValidationError" }

// Error satisfies the builtin error interface
func (e RoleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListReqValidationError{}

// Validate checks the field values on RoleListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleListRespMultiError, or
// nil if none found.
func (m *RoleListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleListRespMultiError(errors)
	}

	return nil
}

// RoleListRespMultiError is an error wrapping multiple validation errors
// returned by RoleListResp.ValidateAll() if the designated constraints aren't met.
type RoleListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListRespMultiError) AllErrors() []error { return m }

// RoleListRespValidationError is the validation error returned by
// RoleListResp.Validate if the designated constraints aren't met.
type RoleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListRespValidationError) ErrorName() string { return "RoleListRespValidationError" }

// Error satisfies the builtin error interface
func (e RoleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListRespValidationError{}

// Validate checks the field values on RoleListByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoleListByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListByCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleListByCodeReqMultiError, or nil if none found.
func (m *RoleListByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := RoleListByCodeReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoleListByCodeReqMultiError(errors)
	}

	return nil
}

// RoleListByCodeReqMultiError is an error wrapping multiple validation errors
// returned by RoleListByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type RoleListByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListByCodeReqMultiError) AllErrors() []error { return m }

// RoleListByCodeReqValidationError is the validation error returned by
// RoleListByCodeReq.Validate if the designated constraints aren't met.
type RoleListByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListByCodeReqValidationError) ErrorName() string {
	return "RoleListByCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e RoleListByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListByCodeReqValidationError{}

// Validate checks the field values on RoleListByCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoleListByCodeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleListByCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoleListByCodeRespMultiError, or nil if none found.
func (m *RoleListByCodeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleListByCodeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleListByCodeRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleListByCodeRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleListByCodeRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleListByCodeRespMultiError(errors)
	}

	return nil
}

// RoleListByCodeRespMultiError is an error wrapping multiple validation errors
// returned by RoleListByCodeResp.ValidateAll() if the designated constraints
// aren't met.
type RoleListByCodeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleListByCodeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleListByCodeRespMultiError) AllErrors() []error { return m }

// RoleListByCodeRespValidationError is the validation error returned by
// RoleListByCodeResp.Validate if the designated constraints aren't met.
type RoleListByCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleListByCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleListByCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleListByCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleListByCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleListByCodeRespValidationError) ErrorName() string {
	return "RoleListByCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e RoleListByCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleListByCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleListByCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleListByCodeRespValidationError{}

// Validate checks the field values on RolePageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolePageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolePageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolePageReqMultiError, or
// nil if none found.
func (m *RolePageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RolePageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := RolePageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return RolePageReqMultiError(errors)
	}

	return nil
}

// RolePageReqMultiError is an error wrapping multiple validation errors
// returned by RolePageReq.ValidateAll() if the designated constraints aren't met.
type RolePageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolePageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolePageReqMultiError) AllErrors() []error { return m }

// RolePageReqValidationError is the validation error returned by
// RolePageReq.Validate if the designated constraints aren't met.
type RolePageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolePageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolePageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolePageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolePageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolePageReqValidationError) ErrorName() string { return "RolePageReqValidationError" }

// Error satisfies the builtin error interface
func (e RolePageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolePageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolePageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolePageReqValidationError{}

// Validate checks the field values on RolePageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolePageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolePageRespMultiError, or
// nil if none found.
func (m *RolePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RolePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RolePageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RolePageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolePageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RolePageRespMultiError(errors)
	}

	return nil
}

// RolePageRespMultiError is an error wrapping multiple validation errors
// returned by RolePageResp.ValidateAll() if the designated constraints aren't met.
type RolePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolePageRespMultiError) AllErrors() []error { return m }

// RolePageRespValidationError is the validation error returned by
// RolePageResp.Validate if the designated constraints aren't met.
type RolePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolePageRespValidationError) ErrorName() string { return "RolePageRespValidationError" }

// Error satisfies the builtin error interface
func (e RolePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolePageRespValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for CreateTime

	// no validation rules for CreateUsername

	// no validation rules for CreateUser

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserAddReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddReqMultiError, or
// nil if none found.
func (m *UserAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetItem() == nil {
		err := UserAddReqValidationError{
			field:  "Item",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAddReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAddReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppCode

	if len(errors) > 0 {
		return UserAddReqMultiError(errors)
	}

	return nil
}

// UserAddReqMultiError is an error wrapping multiple validation errors
// returned by UserAddReq.ValidateAll() if the designated constraints aren't met.
type UserAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddReqMultiError) AllErrors() []error { return m }

// UserAddReqValidationError is the validation error returned by
// UserAddReq.Validate if the designated constraints aren't met.
type UserAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddReqValidationError) ErrorName() string { return "UserAddReqValidationError" }

// Error satisfies the builtin error interface
func (e UserAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddReqValidationError{}

// Validate checks the field values on UserAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAddRespMultiError, or
// nil if none found.
func (m *UserAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return UserAddRespMultiError(errors)
	}

	return nil
}

// UserAddRespMultiError is an error wrapping multiple validation errors
// returned by UserAddResp.ValidateAll() if the designated constraints aren't met.
type UserAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAddRespMultiError) AllErrors() []error { return m }

// UserAddRespValidationError is the validation error returned by
// UserAddResp.Validate if the designated constraints aren't met.
type UserAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAddRespValidationError) ErrorName() string { return "UserAddRespValidationError" }

// Error satisfies the builtin error interface
func (e UserAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAddRespValidationError{}

// Validate checks the field values on UserPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPageReqMultiError, or
// nil if none found.
func (m *UserPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := UserPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrderKey

	// no validation rules for Desc

	// no validation rules for AppCode

	// no validation rules for Account

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for CreateUser

	if len(errors) > 0 {
		return UserPageReqMultiError(errors)
	}

	return nil
}

// UserPageReqMultiError is an error wrapping multiple validation errors
// returned by UserPageReq.ValidateAll() if the designated constraints aren't met.
type UserPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageReqMultiError) AllErrors() []error { return m }

// UserPageReqValidationError is the validation error returned by
// UserPageReq.Validate if the designated constraints aren't met.
type UserPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageReqValidationError) ErrorName() string { return "UserPageReqValidationError" }

// Error satisfies the builtin error interface
func (e UserPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageReqValidationError{}

// Validate checks the field values on UserPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPageRespMultiError, or
// nil if none found.
func (m *UserPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserPageRespMultiError(errors)
	}

	return nil
}

// UserPageRespMultiError is an error wrapping multiple validation errors
// returned by UserPageResp.ValidateAll() if the designated constraints aren't met.
type UserPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageRespMultiError) AllErrors() []error { return m }

// UserPageRespValidationError is the validation error returned by
// UserPageResp.Validate if the designated constraints aren't met.
type UserPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageRespValidationError) ErrorName() string { return "UserPageRespValidationError" }

// Error satisfies the builtin error interface
func (e UserPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageRespValidationError{}

// Validate checks the field values on UserPageBySqlReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPageBySqlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageBySqlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPageBySqlReqMultiError, or nil if none found.
func (m *UserPageBySqlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageBySqlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := UserPageBySqlReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrderKey

	// no validation rules for Desc

	// no validation rules for Filter

	if utf8.RuneCountInString(m.GetAppCode()) < 1 {
		err := UserPageBySqlReqValidationError{
			field:  "AppCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserPageBySqlReqMultiError(errors)
	}

	return nil
}

// UserPageBySqlReqMultiError is an error wrapping multiple validation errors
// returned by UserPageBySqlReq.ValidateAll() if the designated constraints
// aren't met.
type UserPageBySqlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageBySqlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageBySqlReqMultiError) AllErrors() []error { return m }

// UserPageBySqlReqValidationError is the validation error returned by
// UserPageBySqlReq.Validate if the designated constraints aren't met.
type UserPageBySqlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageBySqlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageBySqlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageBySqlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageBySqlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageBySqlReqValidationError) ErrorName() string { return "UserPageBySqlReqValidationError" }

// Error satisfies the builtin error interface
func (e UserPageBySqlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageBySqlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageBySqlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageBySqlReqValidationError{}

// Validate checks the field values on UserPageBySqlResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPageBySqlResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPageBySqlResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPageBySqlRespMultiError, or nil if none found.
func (m *UserPageBySqlResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPageBySqlResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserPageBySqlRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserPageBySqlRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserPageBySqlRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserPageBySqlRespMultiError(errors)
	}

	return nil
}

// UserPageBySqlRespMultiError is an error wrapping multiple validation errors
// returned by UserPageBySqlResp.ValidateAll() if the designated constraints
// aren't met.
type UserPageBySqlRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPageBySqlRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPageBySqlRespMultiError) AllErrors() []error { return m }

// UserPageBySqlRespValidationError is the validation error returned by
// UserPageBySqlResp.Validate if the designated constraints aren't met.
type UserPageBySqlRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPageBySqlRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPageBySqlRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPageBySqlRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPageBySqlRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPageBySqlRespValidationError) ErrorName() string {
	return "UserPageBySqlRespValidationError"
}

// Error satisfies the builtin error interface
func (e UserPageBySqlRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPageBySqlResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPageBySqlRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPageBySqlRespValidationError{}

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateReqMultiError, or
// nil if none found.
func (m *UserUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdateReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdateReqValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdateReqValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppCode

	if len(errors) > 0 {
		return UserUpdateReqMultiError(errors)
	}

	return nil
}

// UserUpdateReqMultiError is an error wrapping multiple validation errors
// returned by UserUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateReqMultiError) AllErrors() []error { return m }

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

// Validate checks the field values on UserUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdateRespMultiError,
// or nil if none found.
func (m *UserUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return UserUpdateRespMultiError(errors)
	}

	return nil
}

// UserUpdateRespMultiError is an error wrapping multiple validation errors
// returned by UserUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type UserUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdateRespMultiError) AllErrors() []error { return m }

// UserUpdateRespValidationError is the validation error returned by
// UserUpdateResp.Validate if the designated constraints aren't met.
type UserUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateRespValidationError) ErrorName() string { return "UserUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateRespValidationError{}

// Validate checks the field values on UserDelReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelReqMultiError, or
// nil if none found.
func (m *UserDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UserDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppCode

	if len(errors) > 0 {
		return UserDelReqMultiError(errors)
	}

	return nil
}

// UserDelReqMultiError is an error wrapping multiple validation errors
// returned by UserDelReq.ValidateAll() if the designated constraints aren't met.
type UserDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelReqMultiError) AllErrors() []error { return m }

// UserDelReqValidationError is the validation error returned by
// UserDelReq.Validate if the designated constraints aren't met.
type UserDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelReqValidationError) ErrorName() string { return "UserDelReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelReqValidationError{}

// Validate checks the field values on UserDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDelRespMultiError, or
// nil if none found.
func (m *UserDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return UserDelRespMultiError(errors)
	}

	return nil
}

// UserDelRespMultiError is an error wrapping multiple validation errors
// returned by UserDelResp.ValidateAll() if the designated constraints aren't met.
type UserDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDelRespMultiError) AllErrors() []error { return m }

// UserDelRespValidationError is the validation error returned by
// UserDelResp.Validate if the designated constraints aren't met.
type UserDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDelRespValidationError) ErrorName() string { return "UserDelRespValidationError" }

// Error satisfies the builtin error interface
func (e UserDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDelRespValidationError{}

// Validate checks the field values on UserGetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetReqMultiError, or
// nil if none found.
func (m *UserGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UserGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppCode

	if len(errors) > 0 {
		return UserGetReqMultiError(errors)
	}

	return nil
}

// UserGetReqMultiError is an error wrapping multiple validation errors
// returned by UserGetReq.ValidateAll() if the designated constraints aren't met.
type UserGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetReqMultiError) AllErrors() []error { return m }

// UserGetReqValidationError is the validation error returned by
// UserGetReq.Validate if the designated constraints aren't met.
type UserGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetReqValidationError) ErrorName() string { return "UserGetReqValidationError" }

// Error satisfies the builtin error interface
func (e UserGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetReqValidationError{}

// Validate checks the field values on UserGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGetRespMultiError, or
// nil if none found.
func (m *UserGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetRespMultiError(errors)
	}

	return nil
}

// UserGetRespMultiError is an error wrapping multiple validation errors
// returned by UserGetResp.ValidateAll() if the designated constraints aren't met.
type UserGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetRespMultiError) AllErrors() []error { return m }

// UserGetRespValidationError is the validation error returned by
// UserGetResp.Validate if the designated constraints aren't met.
type UserGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetRespValidationError) ErrorName() string { return "UserGetRespValidationError" }

// Error satisfies the builtin error interface
func (e UserGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetRespValidationError{}

// Validate checks the field values on UpdatePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordReqMultiError, or nil if none found.
func (m *UpdatePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CurPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return UpdatePasswordReqMultiError(errors)
	}

	return nil
}

// UpdatePasswordReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordReqMultiError) AllErrors() []error { return m }

// UpdatePasswordReqValidationError is the validation error returned by
// UpdatePasswordReq.Validate if the designated constraints aren't met.
type UpdatePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReqValidationError) ErrorName() string {
	return "UpdatePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReqValidationError{}

// Validate checks the field values on UpdatePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePasswordRespMultiError, or nil if none found.
func (m *UpdatePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return UpdatePasswordRespMultiError(errors)
	}

	return nil
}

// UpdatePasswordRespMultiError is an error wrapping multiple validation errors
// returned by UpdatePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type UpdatePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePasswordRespMultiError) AllErrors() []error { return m }

// UpdatePasswordRespValidationError is the validation error returned by
// UpdatePasswordResp.Validate if the designated constraints aren't met.
type UpdatePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordRespValidationError) ErrorName() string {
	return "UpdatePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordRespValidationError{}

// Validate checks the field values on LinkUserRolesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LinkUserRolesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkUserRolesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkUserRolesReqMultiError, or nil if none found.
func (m *LinkUserRolesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkUserRolesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return LinkUserRolesReqMultiError(errors)
	}

	return nil
}

// LinkUserRolesReqMultiError is an error wrapping multiple validation errors
// returned by LinkUserRolesReq.ValidateAll() if the designated constraints
// aren't met.
type LinkUserRolesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkUserRolesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkUserRolesReqMultiError) AllErrors() []error { return m }

// LinkUserRolesReqValidationError is the validation error returned by
// LinkUserRolesReq.Validate if the designated constraints aren't met.
type LinkUserRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkUserRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkUserRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkUserRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkUserRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkUserRolesReqValidationError) ErrorName() string { return "LinkUserRolesReqValidationError" }

// Error satisfies the builtin error interface
func (e LinkUserRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkUserRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkUserRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkUserRolesReqValidationError{}

// Validate checks the field values on UnlinkUserRolesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlinkUserRolesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlinkUserRolesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlinkUserRolesReqMultiError, or nil if none found.
func (m *UnlinkUserRolesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlinkUserRolesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UnlinkUserRolesReqMultiError(errors)
	}

	return nil
}

// UnlinkUserRolesReqMultiError is an error wrapping multiple validation errors
// returned by UnlinkUserRolesReq.ValidateAll() if the designated constraints
// aren't met.
type UnlinkUserRolesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlinkUserRolesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlinkUserRolesReqMultiError) AllErrors() []error { return m }

// UnlinkUserRolesReqValidationError is the validation error returned by
// UnlinkUserRolesReq.Validate if the designated constraints aren't met.
type UnlinkUserRolesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlinkUserRolesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlinkUserRolesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlinkUserRolesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlinkUserRolesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlinkUserRolesReqValidationError) ErrorName() string {
	return "UnlinkUserRolesReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnlinkUserRolesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlinkUserRolesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlinkUserRolesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlinkUserRolesReqValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Content

	// no validation rules for Property

	// no validation rules for ParentId

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on AddResourceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddResourceReqMultiError,
// or nil if none found.
func (m *AddResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddResourceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := AddResourceReqValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if len(errors) > 0 {
		return AddResourceReqMultiError(errors)
	}

	return nil
}

// AddResourceReqMultiError is an error wrapping multiple validation errors
// returned by AddResourceReq.ValidateAll() if the designated constraints
// aren't met.
type AddResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceReqMultiError) AllErrors() []error { return m }

// AddResourceReqValidationError is the validation error returned by
// AddResourceReq.Validate if the designated constraints aren't met.
type AddResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceReqValidationError) ErrorName() string { return "AddResourceReqValidationError" }

// Error satisfies the builtin error interface
func (e AddResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceReqValidationError{}

// Validate checks the field values on AddResourceResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddResourceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceRespMultiError, or nil if none found.
func (m *AddResourceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return AddResourceRespMultiError(errors)
	}

	return nil
}

// AddResourceRespMultiError is an error wrapping multiple validation errors
// returned by AddResourceResp.ValidateAll() if the designated constraints
// aren't met.
type AddResourceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceRespMultiError) AllErrors() []error { return m }

// AddResourceRespValidationError is the validation error returned by
// AddResourceResp.Validate if the designated constraints aren't met.
type AddResourceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceRespValidationError) ErrorName() string { return "AddResourceRespValidationError" }

// Error satisfies the builtin error interface
func (e AddResourceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceRespValidationError{}

// Validate checks the field values on UpdateResourceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceReqMultiError, or nil if none found.
func (m *UpdateResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateResourceReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateResourceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if len(errors) > 0 {
		return UpdateResourceReqMultiError(errors)
	}

	return nil
}

// UpdateResourceReqMultiError is an error wrapping multiple validation errors
// returned by UpdateResourceReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceReqMultiError) AllErrors() []error { return m }

// UpdateResourceReqValidationError is the validation error returned by
// UpdateResourceReq.Validate if the designated constraints aren't met.
type UpdateResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceReqValidationError) ErrorName() string {
	return "UpdateResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceReqValidationError{}

// Validate checks the field values on ResourceGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceGetRespMultiError, or nil if none found.
func (m *ResourceGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceGetRespMultiError(errors)
	}

	return nil
}

// ResourceGetRespMultiError is an error wrapping multiple validation errors
// returned by ResourceGetResp.ValidateAll() if the designated constraints
// aren't met.
type ResourceGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceGetRespMultiError) AllErrors() []error { return m }

// ResourceGetRespValidationError is the validation error returned by
// ResourceGetResp.Validate if the designated constraints aren't met.
type ResourceGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceGetRespValidationError) ErrorName() string { return "ResourceGetRespValidationError" }

// Error satisfies the builtin error interface
func (e ResourceGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceGetRespValidationError{}

// Validate checks the field values on ResourcePageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourcePageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcePageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcePageReqMultiError, or nil if none found.
func (m *ResourcePageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcePageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := ResourcePageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Content

	if len(errors) > 0 {
		return ResourcePageReqMultiError(errors)
	}

	return nil
}

// ResourcePageReqMultiError is an error wrapping multiple validation errors
// returned by ResourcePageReq.ValidateAll() if the designated constraints
// aren't met.
type ResourcePageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcePageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcePageReqMultiError) AllErrors() []error { return m }

// ResourcePageReqValidationError is the validation error returned by
// ResourcePageReq.Validate if the designated constraints aren't met.
type ResourcePageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcePageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcePageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcePageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcePageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcePageReqValidationError) ErrorName() string { return "ResourcePageReqValidationError" }

// Error satisfies the builtin error interface
func (e ResourcePageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcePageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcePageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcePageReqValidationError{}

// Validate checks the field values on ResourcePageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourcePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcePageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcePageRespMultiError, or nil if none found.
func (m *ResourcePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcePageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcePageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcePageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourcePageRespMultiError(errors)
	}

	return nil
}

// ResourcePageRespMultiError is an error wrapping multiple validation errors
// returned by ResourcePageResp.ValidateAll() if the designated constraints
// aren't met.
type ResourcePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcePageRespMultiError) AllErrors() []error { return m }

// ResourcePageRespValidationError is the validation error returned by
// ResourcePageResp.Validate if the designated constraints aren't met.
type ResourcePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcePageRespValidationError) ErrorName() string { return "ResourcePageRespValidationError" }

// Error satisfies the builtin error interface
func (e ResourcePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcePageRespValidationError{}

// Validate checks the field values on ResourceRuleTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRuleTypeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRuleTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRuleTypeReqMultiError, or nil if none found.
func (m *ResourceRuleTypeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRuleTypeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResourceRuleTypeReqMultiError(errors)
	}

	return nil
}

// ResourceRuleTypeReqMultiError is an error wrapping multiple validation
// errors returned by ResourceRuleTypeReq.ValidateAll() if the designated
// constraints aren't met.
type ResourceRuleTypeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRuleTypeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRuleTypeReqMultiError) AllErrors() []error { return m }

// ResourceRuleTypeReqValidationError is the validation error returned by
// ResourceRuleTypeReq.Validate if the designated constraints aren't met.
type ResourceRuleTypeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRuleTypeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRuleTypeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRuleTypeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRuleTypeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRuleTypeReqValidationError) ErrorName() string {
	return "ResourceRuleTypeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRuleTypeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRuleTypeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRuleTypeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRuleTypeReqValidationError{}

// Validate checks the field values on ResourceRuleTypeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRuleTypeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRuleTypeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRuleTypeRespMultiError, or nil if none found.
func (m *ResourceRuleTypeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRuleTypeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResourceRuleTypeRespMultiError(errors)
	}

	return nil
}

// ResourceRuleTypeRespMultiError is an error wrapping multiple validation
// errors returned by ResourceRuleTypeResp.ValidateAll() if the designated
// constraints aren't met.
type ResourceRuleTypeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRuleTypeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRuleTypeRespMultiError) AllErrors() []error { return m }

// ResourceRuleTypeRespValidationError is the validation error returned by
// ResourceRuleTypeResp.Validate if the designated constraints aren't met.
type ResourceRuleTypeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRuleTypeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRuleTypeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRuleTypeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRuleTypeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRuleTypeRespValidationError) ErrorName() string {
	return "ResourceRuleTypeRespValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRuleTypeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRuleTypeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRuleTypeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRuleTypeRespValidationError{}

// Validate checks the field values on ApiWhiteList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiWhiteListMultiError, or
// nil if none found.
func (m *ApiWhiteList) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Path

	// no validation rules for CreateTime

	// no validation rules for CreateUsername

	if len(errors) > 0 {
		return ApiWhiteListMultiError(errors)
	}

	return nil
}

// ApiWhiteListMultiError is an error wrapping multiple validation errors
// returned by ApiWhiteList.ValidateAll() if the designated constraints aren't met.
type ApiWhiteListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListMultiError) AllErrors() []error { return m }

// ApiWhiteListValidationError is the validation error returned by
// ApiWhiteList.Validate if the designated constraints aren't met.
type ApiWhiteListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListValidationError) ErrorName() string { return "ApiWhiteListValidationError" }

// Error satisfies the builtin error interface
func (e ApiWhiteListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListValidationError{}

// Validate checks the field values on ApiWhiteListRefreshReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListRefreshReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListRefreshReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListRefreshReqMultiError, or nil if none found.
func (m *ApiWhiteListRefreshReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListRefreshReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApiWhiteListRefreshReqMultiError(errors)
	}

	return nil
}

// ApiWhiteListRefreshReqMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListRefreshReq.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListRefreshReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListRefreshReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListRefreshReqMultiError) AllErrors() []error { return m }

// ApiWhiteListRefreshReqValidationError is the validation error returned by
// ApiWhiteListRefreshReq.Validate if the designated constraints aren't met.
type ApiWhiteListRefreshReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListRefreshReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListRefreshReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListRefreshReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListRefreshReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListRefreshReqValidationError) ErrorName() string {
	return "ApiWhiteListRefreshReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListRefreshReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListRefreshReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListRefreshReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListRefreshReqValidationError{}

// Validate checks the field values on ApiWhiteListRefreshResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListRefreshResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListRefreshResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListRefreshRespMultiError, or nil if none found.
func (m *ApiWhiteListRefreshResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListRefreshResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ApiWhiteListRefreshRespMultiError(errors)
	}

	return nil
}

// ApiWhiteListRefreshRespMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListRefreshResp.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListRefreshRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListRefreshRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListRefreshRespMultiError) AllErrors() []error { return m }

// ApiWhiteListRefreshRespValidationError is the validation error returned by
// ApiWhiteListRefreshResp.Validate if the designated constraints aren't met.
type ApiWhiteListRefreshRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListRefreshRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListRefreshRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListRefreshRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListRefreshRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListRefreshRespValidationError) ErrorName() string {
	return "ApiWhiteListRefreshRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListRefreshRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListRefreshResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListRefreshRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListRefreshRespValidationError{}

// Validate checks the field values on ApiWhiteListAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListAddReqMultiError, or nil if none found.
func (m *ApiWhiteListAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ApiWhiteListAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := ApiWhiteListAddReqValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiWhiteListAddReqMultiError(errors)
	}

	return nil
}

// ApiWhiteListAddReqMultiError is an error wrapping multiple validation errors
// returned by ApiWhiteListAddReq.ValidateAll() if the designated constraints
// aren't met.
type ApiWhiteListAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListAddReqMultiError) AllErrors() []error { return m }

// ApiWhiteListAddReqValidationError is the validation error returned by
// ApiWhiteListAddReq.Validate if the designated constraints aren't met.
type ApiWhiteListAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListAddReqValidationError) ErrorName() string {
	return "ApiWhiteListAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListAddReqValidationError{}

// Validate checks the field values on ApiWhiteListAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListAddRespMultiError, or nil if none found.
func (m *ApiWhiteListAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ApiWhiteListAddRespMultiError(errors)
	}

	return nil
}

// ApiWhiteListAddRespMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListAddResp.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListAddRespMultiError) AllErrors() []error { return m }

// ApiWhiteListAddRespValidationError is the validation error returned by
// ApiWhiteListAddResp.Validate if the designated constraints aren't met.
type ApiWhiteListAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListAddRespValidationError) ErrorName() string {
	return "ApiWhiteListAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListAddRespValidationError{}

// Validate checks the field values on ApiWhiteListUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListUpdateReqMultiError, or nil if none found.
func (m *ApiWhiteListUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ApiWhiteListUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ApiWhiteListUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		err := ApiWhiteListUpdateReqValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiWhiteListUpdateReqMultiError(errors)
	}

	return nil
}

// ApiWhiteListUpdateReqMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListUpdateReqMultiError) AllErrors() []error { return m }

// ApiWhiteListUpdateReqValidationError is the validation error returned by
// ApiWhiteListUpdateReq.Validate if the designated constraints aren't met.
type ApiWhiteListUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListUpdateReqValidationError) ErrorName() string {
	return "ApiWhiteListUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListUpdateReqValidationError{}

// Validate checks the field values on ApiWhiteListUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListUpdateRespMultiError, or nil if none found.
func (m *ApiWhiteListUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ApiWhiteListUpdateRespMultiError(errors)
	}

	return nil
}

// ApiWhiteListUpdateRespMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListUpdateResp.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListUpdateRespMultiError) AllErrors() []error { return m }

// ApiWhiteListUpdateRespValidationError is the validation error returned by
// ApiWhiteListUpdateResp.Validate if the designated constraints aren't met.
type ApiWhiteListUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListUpdateRespValidationError) ErrorName() string {
	return "ApiWhiteListUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListUpdateRespValidationError{}

// Validate checks the field values on ApiWhiteListDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListDelReqMultiError, or nil if none found.
func (m *ApiWhiteListDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ApiWhiteListDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApiWhiteListDelReqMultiError(errors)
	}

	return nil
}

// ApiWhiteListDelReqMultiError is an error wrapping multiple validation errors
// returned by ApiWhiteListDelReq.ValidateAll() if the designated constraints
// aren't met.
type ApiWhiteListDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListDelReqMultiError) AllErrors() []error { return m }

// ApiWhiteListDelReqValidationError is the validation error returned by
// ApiWhiteListDelReq.Validate if the designated constraints aren't met.
type ApiWhiteListDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListDelReqValidationError) ErrorName() string {
	return "ApiWhiteListDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListDelReqValidationError{}

// Validate checks the field values on ApiWhiteListDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListDelRespMultiError, or nil if none found.
func (m *ApiWhiteListDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ApiWhiteListDelRespMultiError(errors)
	}

	return nil
}

// ApiWhiteListDelRespMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListDelResp.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListDelRespMultiError) AllErrors() []error { return m }

// ApiWhiteListDelRespValidationError is the validation error returned by
// ApiWhiteListDelResp.Validate if the designated constraints aren't met.
type ApiWhiteListDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListDelRespValidationError) ErrorName() string {
	return "ApiWhiteListDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListDelRespValidationError{}

// Validate checks the field values on ApiWhiteListPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListPageReqMultiError, or nil if none found.
func (m *ApiWhiteListPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := ApiWhiteListPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ApiWhiteListPageReqMultiError(errors)
	}

	return nil
}

// ApiWhiteListPageReqMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListPageReq.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListPageReqMultiError) AllErrors() []error { return m }

// ApiWhiteListPageReqValidationError is the validation error returned by
// ApiWhiteListPageReq.Validate if the designated constraints aren't met.
type ApiWhiteListPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListPageReqValidationError) ErrorName() string {
	return "ApiWhiteListPageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListPageReqValidationError{}

// Validate checks the field values on ApiWhiteListPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApiWhiteListPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiWhiteListPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApiWhiteListPageRespMultiError, or nil if none found.
func (m *ApiWhiteListPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiWhiteListPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiWhiteListPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiWhiteListPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiWhiteListPageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApiWhiteListPageRespMultiError(errors)
	}

	return nil
}

// ApiWhiteListPageRespMultiError is an error wrapping multiple validation
// errors returned by ApiWhiteListPageResp.ValidateAll() if the designated
// constraints aren't met.
type ApiWhiteListPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiWhiteListPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiWhiteListPageRespMultiError) AllErrors() []error { return m }

// ApiWhiteListPageRespValidationError is the validation error returned by
// ApiWhiteListPageResp.Validate if the designated constraints aren't met.
type ApiWhiteListPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiWhiteListPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiWhiteListPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiWhiteListPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiWhiteListPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiWhiteListPageRespValidationError) ErrorName() string {
	return "ApiWhiteListPageRespValidationError"
}

// Error satisfies the builtin error interface
func (e ApiWhiteListPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiWhiteListPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiWhiteListPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiWhiteListPageRespValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for AppId

	// no validation rules for AppName

	// no validation rules for ResourceType

	// no validation rules for Resources

	// no validation rules for CreateTime

	// no validation rules for ResourcesJson

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on PermissionPageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionPageReqMultiError, or nil if none found.
func (m *PermissionPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := PermissionPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	// no validation rules for AppId

	if len(errors) > 0 {
		return PermissionPageReqMultiError(errors)
	}

	return nil
}

// PermissionPageReqMultiError is an error wrapping multiple validation errors
// returned by PermissionPageReq.ValidateAll() if the designated constraints
// aren't met.
type PermissionPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionPageReqMultiError) AllErrors() []error { return m }

// PermissionPageReqValidationError is the validation error returned by
// PermissionPageReq.Validate if the designated constraints aren't met.
type PermissionPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionPageReqValidationError) ErrorName() string {
	return "PermissionPageReqValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionPageReqValidationError{}

// Validate checks the field values on PermissionPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionPageRespMultiError, or nil if none found.
func (m *PermissionPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermissionPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermissionPageRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionPageRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PermissionPageRespMultiError(errors)
	}

	return nil
}

// PermissionPageRespMultiError is an error wrapping multiple validation errors
// returned by PermissionPageResp.ValidateAll() if the designated constraints
// aren't met.
type PermissionPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionPageRespMultiError) AllErrors() []error { return m }

// PermissionPageRespValidationError is the validation error returned by
// PermissionPageResp.Validate if the designated constraints aren't met.
type PermissionPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionPageRespValidationError) ErrorName() string {
	return "PermissionPageRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionPageRespValidationError{}

// Validate checks the field values on PermissionAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionAddReqMultiError, or nil if none found.
func (m *PermissionAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := PermissionAddReqValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppId

	if utf8.RuneCountInString(m.GetResourceType()) < 1 {
		err := PermissionAddReqValidationError{
			field:  "ResourceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Resources

	if len(errors) > 0 {
		return PermissionAddReqMultiError(errors)
	}

	return nil
}

// PermissionAddReqMultiError is an error wrapping multiple validation errors
// returned by PermissionAddReq.ValidateAll() if the designated constraints
// aren't met.
type PermissionAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionAddReqMultiError) AllErrors() []error { return m }

// PermissionAddReqValidationError is the validation error returned by
// PermissionAddReq.Validate if the designated constraints aren't met.
type PermissionAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionAddReqValidationError) ErrorName() string { return "PermissionAddReqValidationError" }

// Error satisfies the builtin error interface
func (e PermissionAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionAddReqValidationError{}

// Validate checks the field values on PermissionAddResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionAddRespMultiError, or nil if none found.
func (m *PermissionAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return PermissionAddRespMultiError(errors)
	}

	return nil
}

// PermissionAddRespMultiError is an error wrapping multiple validation errors
// returned by PermissionAddResp.ValidateAll() if the designated constraints
// aren't met.
type PermissionAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionAddRespMultiError) AllErrors() []error { return m }

// PermissionAddRespValidationError is the validation error returned by
// PermissionAddResp.Validate if the designated constraints aren't met.
type PermissionAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionAddRespValidationError) ErrorName() string {
	return "PermissionAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionAddRespValidationError{}

// Validate checks the field values on PermissionUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionUpdateReqMultiError, or nil if none found.
func (m *PermissionUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PermissionUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := PermissionUpdateReqValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppId

	// no validation rules for Resources

	if len(errors) > 0 {
		return PermissionUpdateReqMultiError(errors)
	}

	return nil
}

// PermissionUpdateReqMultiError is an error wrapping multiple validation
// errors returned by PermissionUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type PermissionUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionUpdateReqMultiError) AllErrors() []error { return m }

// PermissionUpdateReqValidationError is the validation error returned by
// PermissionUpdateReq.Validate if the designated constraints aren't met.
type PermissionUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionUpdateReqValidationError) ErrorName() string {
	return "PermissionUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionUpdateReqValidationError{}

// Validate checks the field values on PermissionUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionUpdateRespMultiError, or nil if none found.
func (m *PermissionUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return PermissionUpdateRespMultiError(errors)
	}

	return nil
}

// PermissionUpdateRespMultiError is an error wrapping multiple validation
// errors returned by PermissionUpdateResp.ValidateAll() if the designated
// constraints aren't met.
type PermissionUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionUpdateRespMultiError) AllErrors() []error { return m }

// PermissionUpdateRespValidationError is the validation error returned by
// PermissionUpdateResp.Validate if the designated constraints aren't met.
type PermissionUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionUpdateRespValidationError) ErrorName() string {
	return "PermissionUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionUpdateRespValidationError{}

// Validate checks the field values on PermissionDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionDelReqMultiError, or nil if none found.
func (m *PermissionDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PermissionDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PermissionDelReqMultiError(errors)
	}

	return nil
}

// PermissionDelReqMultiError is an error wrapping multiple validation errors
// returned by PermissionDelReq.ValidateAll() if the designated constraints
// aren't met.
type PermissionDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionDelReqMultiError) AllErrors() []error { return m }

// PermissionDelReqValidationError is the validation error returned by
// PermissionDelReq.Validate if the designated constraints aren't met.
type PermissionDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionDelReqValidationError) ErrorName() string { return "PermissionDelReqValidationError" }

// Error satisfies the builtin error interface
func (e PermissionDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionDelReqValidationError{}

// Validate checks the field values on PermissionDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionDelRespMultiError, or nil if none found.
func (m *PermissionDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return PermissionDelRespMultiError(errors)
	}

	return nil
}

// PermissionDelRespMultiError is an error wrapping multiple validation errors
// returned by PermissionDelResp.ValidateAll() if the designated constraints
// aren't met.
type PermissionDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionDelRespMultiError) AllErrors() []error { return m }

// PermissionDelRespValidationError is the validation error returned by
// PermissionDelResp.Validate if the designated constraints aren't met.
type PermissionDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionDelRespValidationError) ErrorName() string {
	return "PermissionDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionDelRespValidationError{}

// Validate checks the field values on PermissionGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGetReqMultiError, or nil if none found.
func (m *PermissionGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PermissionGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PermissionGetReqMultiError(errors)
	}

	return nil
}

// PermissionGetReqMultiError is an error wrapping multiple validation errors
// returned by PermissionGetReq.ValidateAll() if the designated constraints
// aren't met.
type PermissionGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGetReqMultiError) AllErrors() []error { return m }

// PermissionGetReqValidationError is the validation error returned by
// PermissionGetReq.Validate if the designated constraints aren't met.
type PermissionGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGetReqValidationError) ErrorName() string { return "PermissionGetReqValidationError" }

// Error satisfies the builtin error interface
func (e PermissionGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGetReqValidationError{}

// Validate checks the field values on PermissionGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PermissionGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGetRespMultiError, or nil if none found.
func (m *PermissionGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PermissionGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PermissionGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PermissionGetRespMultiError(errors)
	}

	return nil
}

// PermissionGetRespMultiError is an error wrapping multiple validation errors
// returned by PermissionGetResp.ValidateAll() if the designated constraints
// aren't met.
type PermissionGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGetRespMultiError) AllErrors() []error { return m }

// PermissionGetRespValidationError is the validation error returned by
// PermissionGetResp.Validate if the designated constraints aren't met.
type PermissionGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGetRespValidationError) ErrorName() string {
	return "PermissionGetRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGetRespValidationError{}

// Validate checks the field values on PermissionGetMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionGetMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGetMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGetMenuReqMultiError, or nil if none found.
func (m *PermissionGetMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGetMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppCode

	if len(errors) > 0 {
		return PermissionGetMenuReqMultiError(errors)
	}

	return nil
}

// PermissionGetMenuReqMultiError is an error wrapping multiple validation
// errors returned by PermissionGetMenuReq.ValidateAll() if the designated
// constraints aren't met.
type PermissionGetMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGetMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGetMenuReqMultiError) AllErrors() []error { return m }

// PermissionGetMenuReqValidationError is the validation error returned by
// PermissionGetMenuReq.Validate if the designated constraints aren't met.
type PermissionGetMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGetMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGetMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGetMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGetMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGetMenuReqValidationError) ErrorName() string {
	return "PermissionGetMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionGetMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGetMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGetMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGetMenuReqValidationError{}

// Validate checks the field values on PermissionGetMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PermissionGetMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionGetMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PermissionGetMenuRespMultiError, or nil if none found.
func (m *PermissionGetMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionGetMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Menu

	if len(errors) > 0 {
		return PermissionGetMenuRespMultiError(errors)
	}

	return nil
}

// PermissionGetMenuRespMultiError is an error wrapping multiple validation
// errors returned by PermissionGetMenuResp.ValidateAll() if the designated
// constraints aren't met.
type PermissionGetMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionGetMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionGetMenuRespMultiError) AllErrors() []error { return m }

// PermissionGetMenuRespValidationError is the validation error returned by
// PermissionGetMenuResp.Validate if the designated constraints aren't met.
type PermissionGetMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionGetMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionGetMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionGetMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionGetMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionGetMenuRespValidationError) ErrorName() string {
	return "PermissionGetMenuRespValidationError"
}

// Error satisfies the builtin error interface
func (e PermissionGetMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionGetMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionGetMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionGetMenuRespValidationError{}
