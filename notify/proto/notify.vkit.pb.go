// Code generated by protoc-gen-vkit. DO NOT EDIT.
// versions:
// - protoc-gen-vkit v1.0.0
// - protoc             v3.21.1
// source: notify.proto

package proto

import (
	context "context"
	grpcx "github.com/visonlv/go-vkit/grpcx"
	grpc "google.golang.org/grpc"
)

var _ = new(context.Context)
var _ = new(grpc.CallOption)
var _ = new(grpcx.Client)

type NotifyConfigServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *NotifyConfigServiceClient) Add(ctx context.Context, in *NotifyConfigAddReq, opts ...grpc.CallOption) (*NotifyConfigAddResp, error) {
	out := new(NotifyConfigAddResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Del(ctx context.Context, in *NotifyConfigDelReq, opts ...grpc.CallOption) (*NotifyConfigDelResp, error) {
	out := new(NotifyConfigDelResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Update(ctx context.Context, in *NotifyConfigUpdateReq, opts ...grpc.CallOption) (*NotifyConfigUpdateResp, error) {
	out := new(NotifyConfigUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Get(ctx context.Context, in *NotifyConfigGetReq, opts ...grpc.CallOption) (*NotifyConfigGetResp, error) {
	out := new(NotifyConfigGetResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) List(ctx context.Context, in *NotifyConfigListReq, opts ...grpc.CallOption) (*NotifyConfigListResp, error) {
	out := new(NotifyConfigListResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Page(ctx context.Context, in *NotifyConfigPageReq, opts ...grpc.CallOption) (*NotifyConfigPageResp, error) {
	out := new(NotifyConfigPageResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewNotifyConfigServiceClient(name string, cc grpcx.Client) *NotifyConfigServiceClient {
	return &NotifyConfigServiceClient{name, cc}
}
