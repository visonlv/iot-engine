// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NotifyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyConfigMultiError, or
// nil if none found.
func (m *NotifyConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pk

	// no validation rules for Sn

	// no validation rules for Group

	// no validation rules for Notify

	if len(errors) > 0 {
		return NotifyConfigMultiError(errors)
	}

	return nil
}

// NotifyConfigMultiError is an error wrapping multiple validation errors
// returned by NotifyConfig.ValidateAll() if the designated constraints aren't met.
type NotifyConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigMultiError) AllErrors() []error { return m }

// NotifyConfigValidationError is the validation error returned by
// NotifyConfig.Validate if the designated constraints aren't met.
type NotifyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigValidationError) ErrorName() string { return "NotifyConfigValidationError" }

// Error satisfies the builtin error interface
func (e NotifyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigValidationError{}

// Validate checks the field values on NotifyConfigAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigAddReqMultiError, or nil if none found.
func (m *NotifyConfigAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotifyConfigAddReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := NotifyConfigAddReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := NotifyConfigAddReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return NotifyConfigAddReqMultiError(errors)
	}

	return nil
}

// NotifyConfigAddReqMultiError is an error wrapping multiple validation errors
// returned by NotifyConfigAddReq.ValidateAll() if the designated constraints
// aren't met.
type NotifyConfigAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigAddReqMultiError) AllErrors() []error { return m }

// NotifyConfigAddReqValidationError is the validation error returned by
// NotifyConfigAddReq.Validate if the designated constraints aren't met.
type NotifyConfigAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigAddReqValidationError) ErrorName() string {
	return "NotifyConfigAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigAddReqValidationError{}

// Validate checks the field values on NotifyConfigAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigAddRespMultiError, or nil if none found.
func (m *NotifyConfigAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return NotifyConfigAddRespMultiError(errors)
	}

	return nil
}

// NotifyConfigAddRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigAddResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigAddRespMultiError) AllErrors() []error { return m }

// NotifyConfigAddRespValidationError is the validation error returned by
// NotifyConfigAddResp.Validate if the designated constraints aren't met.
type NotifyConfigAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigAddRespValidationError) ErrorName() string {
	return "NotifyConfigAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigAddRespValidationError{}

// Validate checks the field values on NotifyConfigDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigDelReqMultiError, or nil if none found.
func (m *NotifyConfigDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotifyConfigDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotifyConfigDelReqMultiError(errors)
	}

	return nil
}

// NotifyConfigDelReqMultiError is an error wrapping multiple validation errors
// returned by NotifyConfigDelReq.ValidateAll() if the designated constraints
// aren't met.
type NotifyConfigDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigDelReqMultiError) AllErrors() []error { return m }

// NotifyConfigDelReqValidationError is the validation error returned by
// NotifyConfigDelReq.Validate if the designated constraints aren't met.
type NotifyConfigDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigDelReqValidationError) ErrorName() string {
	return "NotifyConfigDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigDelReqValidationError{}

// Validate checks the field values on NotifyConfigDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigDelRespMultiError, or nil if none found.
func (m *NotifyConfigDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return NotifyConfigDelRespMultiError(errors)
	}

	return nil
}

// NotifyConfigDelRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigDelResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigDelRespMultiError) AllErrors() []error { return m }

// NotifyConfigDelRespValidationError is the validation error returned by
// NotifyConfigDelResp.Validate if the designated constraints aren't met.
type NotifyConfigDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigDelRespValidationError) ErrorName() string {
	return "NotifyConfigDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigDelRespValidationError{}

// Validate checks the field values on NotifyConfigUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigUpdateReqMultiError, or nil if none found.
func (m *NotifyConfigUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotifyConfigUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := NotifyConfigUpdateReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := NotifyConfigUpdateReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return NotifyConfigUpdateReqMultiError(errors)
	}

	return nil
}

// NotifyConfigUpdateReqMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigUpdateReqMultiError) AllErrors() []error { return m }

// NotifyConfigUpdateReqValidationError is the validation error returned by
// NotifyConfigUpdateReq.Validate if the designated constraints aren't met.
type NotifyConfigUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigUpdateReqValidationError) ErrorName() string {
	return "NotifyConfigUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigUpdateReqValidationError{}

// Validate checks the field values on NotifyConfigUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigUpdateRespMultiError, or nil if none found.
func (m *NotifyConfigUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return NotifyConfigUpdateRespMultiError(errors)
	}

	return nil
}

// NotifyConfigUpdateRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigUpdateResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigUpdateRespMultiError) AllErrors() []error { return m }

// NotifyConfigUpdateRespValidationError is the validation error returned by
// NotifyConfigUpdateResp.Validate if the designated constraints aren't met.
type NotifyConfigUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigUpdateRespValidationError) ErrorName() string {
	return "NotifyConfigUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigUpdateRespValidationError{}

// Validate checks the field values on NotifyConfigGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigGetReqMultiError, or nil if none found.
func (m *NotifyConfigGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotifyConfigGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotifyConfigGetReqMultiError(errors)
	}

	return nil
}

// NotifyConfigGetReqMultiError is an error wrapping multiple validation errors
// returned by NotifyConfigGetReq.ValidateAll() if the designated constraints
// aren't met.
type NotifyConfigGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigGetReqMultiError) AllErrors() []error { return m }

// NotifyConfigGetReqValidationError is the validation error returned by
// NotifyConfigGetReq.Validate if the designated constraints aren't met.
type NotifyConfigGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigGetReqValidationError) ErrorName() string {
	return "NotifyConfigGetReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigGetReqValidationError{}

// Validate checks the field values on NotifyConfigGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigGetRespMultiError, or nil if none found.
func (m *NotifyConfigGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyConfigGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyConfigGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyConfigGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyConfigGetRespMultiError(errors)
	}

	return nil
}

// NotifyConfigGetRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigGetResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigGetRespMultiError) AllErrors() []error { return m }

// NotifyConfigGetRespValidationError is the validation error returned by
// NotifyConfigGetResp.Validate if the designated constraints aren't met.
type NotifyConfigGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigGetRespValidationError) ErrorName() string {
	return "NotifyConfigGetRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigGetRespValidationError{}

// Validate checks the field values on NotifyConfigListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigListReqMultiError, or nil if none found.
func (m *NotifyConfigListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyConfigListReqMultiError(errors)
	}

	return nil
}

// NotifyConfigListReqMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigListReq.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigListReqMultiError) AllErrors() []error { return m }

// NotifyConfigListReqValidationError is the validation error returned by
// NotifyConfigListReq.Validate if the designated constraints aren't met.
type NotifyConfigListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigListReqValidationError) ErrorName() string {
	return "NotifyConfigListReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigListReqValidationError{}

// Validate checks the field values on NotifyConfigListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigListRespMultiError, or nil if none found.
func (m *NotifyConfigListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyConfigListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyConfigListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyConfigListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyConfigListRespMultiError(errors)
	}

	return nil
}

// NotifyConfigListRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigListResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigListRespMultiError) AllErrors() []error { return m }

// NotifyConfigListRespValidationError is the validation error returned by
// NotifyConfigListResp.Validate if the designated constraints aren't met.
type NotifyConfigListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigListRespValidationError) ErrorName() string {
	return "NotifyConfigListRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigListRespValidationError{}

// Validate checks the field values on NotifyConfigPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigPageReqMultiError, or nil if none found.
func (m *NotifyConfigPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := NotifyConfigPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotifyConfigPageReqMultiError(errors)
	}

	return nil
}

// NotifyConfigPageReqMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigPageReq.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigPageReqMultiError) AllErrors() []error { return m }

// NotifyConfigPageReqValidationError is the validation error returned by
// NotifyConfigPageReq.Validate if the designated constraints aren't met.
type NotifyConfigPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigPageReqValidationError) ErrorName() string {
	return "NotifyConfigPageReqValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigPageReqValidationError{}

// Validate checks the field values on NotifyConfigPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyConfigPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyConfigPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyConfigPageRespMultiError, or nil if none found.
func (m *NotifyConfigPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyConfigPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyConfigPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyConfigPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyConfigPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyConfigPageRespMultiError(errors)
	}

	return nil
}

// NotifyConfigPageRespMultiError is an error wrapping multiple validation
// errors returned by NotifyConfigPageResp.ValidateAll() if the designated
// constraints aren't met.
type NotifyConfigPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyConfigPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyConfigPageRespMultiError) AllErrors() []error { return m }

// NotifyConfigPageRespValidationError is the validation error returned by
// NotifyConfigPageResp.Validate if the designated constraints aren't met.
type NotifyConfigPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyConfigPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyConfigPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyConfigPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyConfigPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyConfigPageRespValidationError) ErrorName() string {
	return "NotifyConfigPageRespValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyConfigPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyConfigPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyConfigPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyConfigPageRespValidationError{}
