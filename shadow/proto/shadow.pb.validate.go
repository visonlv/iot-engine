// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shadow.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ForwardingPropertiesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingPropertiesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingPropertiesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPropertiesReqMultiError, or nil if none found.
func (m *ForwardingPropertiesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingPropertiesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithDefault

	if len(errors) > 0 {
		return ForwardingPropertiesReqMultiError(errors)
	}

	return nil
}

// ForwardingPropertiesReqMultiError is an error wrapping multiple validation
// errors returned by ForwardingPropertiesReq.ValidateAll() if the designated
// constraints aren't met.
type ForwardingPropertiesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPropertiesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPropertiesReqMultiError) AllErrors() []error { return m }

// ForwardingPropertiesReqValidationError is the validation error returned by
// ForwardingPropertiesReq.Validate if the designated constraints aren't met.
type ForwardingPropertiesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPropertiesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPropertiesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPropertiesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPropertiesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPropertiesReqValidationError) ErrorName() string {
	return "ForwardingPropertiesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPropertiesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingPropertiesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPropertiesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPropertiesReqValidationError{}

// Validate checks the field values on ForwardingPropertyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingPropertyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingPropertyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPropertyItemMultiError, or nil if none found.
func (m *ForwardingPropertyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingPropertyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return ForwardingPropertyItemMultiError(errors)
	}

	return nil
}

// ForwardingPropertyItemMultiError is an error wrapping multiple validation
// errors returned by ForwardingPropertyItem.ValidateAll() if the designated
// constraints aren't met.
type ForwardingPropertyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPropertyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPropertyItemMultiError) AllErrors() []error { return m }

// ForwardingPropertyItemValidationError is the validation error returned by
// ForwardingPropertyItem.Validate if the designated constraints aren't met.
type ForwardingPropertyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPropertyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPropertyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPropertyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPropertyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPropertyItemValidationError) ErrorName() string {
	return "ForwardingPropertyItemValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPropertyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingPropertyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPropertyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPropertyItemValidationError{}

// Validate checks the field values on ForwardingProperty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingProperty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPropertyMultiError, or nil if none found.
func (m *ForwardingProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pk

	// no validation rules for Sn

	{
		sorted_keys := make([]string, len(m.GetPropertyMap()))
		i := 0
		for key := range m.GetPropertyMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPropertyMap()[key]
			_ = val

			// no validation rules for PropertyMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ForwardingPropertyValidationError{
							field:  fmt.Sprintf("PropertyMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ForwardingPropertyValidationError{
							field:  fmt.Sprintf("PropertyMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ForwardingPropertyValidationError{
						field:  fmt.Sprintf("PropertyMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ForwardingPropertyMultiError(errors)
	}

	return nil
}

// ForwardingPropertyMultiError is an error wrapping multiple validation errors
// returned by ForwardingProperty.ValidateAll() if the designated constraints
// aren't met.
type ForwardingPropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPropertyMultiError) AllErrors() []error { return m }

// ForwardingPropertyValidationError is the validation error returned by
// ForwardingProperty.Validate if the designated constraints aren't met.
type ForwardingPropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPropertyValidationError) ErrorName() string {
	return "ForwardingPropertyValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPropertyValidationError{}

// Validate checks the field values on ForwardingPropertiesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingPropertiesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingPropertiesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPropertiesRespMultiError, or nil if none found.
func (m *ForwardingPropertiesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingPropertiesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ForwardingPropertiesRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ForwardingPropertiesRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ForwardingPropertiesRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ForwardingPropertiesRespMultiError(errors)
	}

	return nil
}

// ForwardingPropertiesRespMultiError is an error wrapping multiple validation
// errors returned by ForwardingPropertiesResp.ValidateAll() if the designated
// constraints aren't met.
type ForwardingPropertiesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPropertiesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPropertiesRespMultiError) AllErrors() []error { return m }

// ForwardingPropertiesRespValidationError is the validation error returned by
// ForwardingPropertiesResp.Validate if the designated constraints aren't met.
type ForwardingPropertiesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPropertiesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPropertiesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPropertiesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPropertiesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPropertiesRespValidationError) ErrorName() string {
	return "ForwardingPropertiesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPropertiesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingPropertiesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPropertiesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPropertiesRespValidationError{}

// Validate checks the field values on ForwardingServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingServiceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingServiceReqMultiError, or nil if none found.
func (m *ForwardingServiceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingServiceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ForwardingServiceReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContextId

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ForwardingServiceReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	// no validation rules for Timeout

	if len(errors) > 0 {
		return ForwardingServiceReqMultiError(errors)
	}

	return nil
}

// ForwardingServiceReqMultiError is an error wrapping multiple validation
// errors returned by ForwardingServiceReq.ValidateAll() if the designated
// constraints aren't met.
type ForwardingServiceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingServiceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingServiceReqMultiError) AllErrors() []error { return m }

// ForwardingServiceReqValidationError is the validation error returned by
// ForwardingServiceReq.Validate if the designated constraints aren't met.
type ForwardingServiceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingServiceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingServiceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingServiceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingServiceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingServiceReqValidationError) ErrorName() string {
	return "ForwardingServiceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingServiceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingServiceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingServiceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingServiceReqValidationError{}

// Validate checks the field values on ForwardingServiceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingServiceResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingServiceResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingServiceRespMultiError, or nil if none found.
func (m *ForwardingServiceResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingServiceResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetM()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardingServiceRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardingServiceRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetM()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardingServiceRespValidationError{
				field:  "M",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardingServiceRespMultiError(errors)
	}

	return nil
}

// ForwardingServiceRespMultiError is an error wrapping multiple validation
// errors returned by ForwardingServiceResp.ValidateAll() if the designated
// constraints aren't met.
type ForwardingServiceRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingServiceRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingServiceRespMultiError) AllErrors() []error { return m }

// ForwardingServiceRespValidationError is the validation error returned by
// ForwardingServiceResp.Validate if the designated constraints aren't met.
type ForwardingServiceRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingServiceRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingServiceRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingServiceRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingServiceRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingServiceRespValidationError) ErrorName() string {
	return "ForwardingServiceRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingServiceRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingServiceResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingServiceRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingServiceRespValidationError{}

// Validate checks the field values on ForwardingSetPropertyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingSetPropertyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingSetPropertyReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingSetPropertyReqMultiError, or nil if none found.
func (m *ForwardingSetPropertyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingSetPropertyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ForwardingSetPropertyReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContextId

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ForwardingSetPropertyReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	// no validation rules for Timeout

	if len(errors) > 0 {
		return ForwardingSetPropertyReqMultiError(errors)
	}

	return nil
}

// ForwardingSetPropertyReqMultiError is an error wrapping multiple validation
// errors returned by ForwardingSetPropertyReq.ValidateAll() if the designated
// constraints aren't met.
type ForwardingSetPropertyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingSetPropertyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingSetPropertyReqMultiError) AllErrors() []error { return m }

// ForwardingSetPropertyReqValidationError is the validation error returned by
// ForwardingSetPropertyReq.Validate if the designated constraints aren't met.
type ForwardingSetPropertyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingSetPropertyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingSetPropertyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingSetPropertyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingSetPropertyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingSetPropertyReqValidationError) ErrorName() string {
	return "ForwardingSetPropertyReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingSetPropertyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingSetPropertyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingSetPropertyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingSetPropertyReqValidationError{}

// Validate checks the field values on ForwardingSetPropertyResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingSetPropertyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingSetPropertyResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingSetPropertyRespMultiError, or nil if none found.
func (m *ForwardingSetPropertyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingSetPropertyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetM()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardingSetPropertyRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardingSetPropertyRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetM()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardingSetPropertyRespValidationError{
				field:  "M",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardingSetPropertyRespMultiError(errors)
	}

	return nil
}

// ForwardingSetPropertyRespMultiError is an error wrapping multiple validation
// errors returned by ForwardingSetPropertyResp.ValidateAll() if the
// designated constraints aren't met.
type ForwardingSetPropertyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingSetPropertyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingSetPropertyRespMultiError) AllErrors() []error { return m }

// ForwardingSetPropertyRespValidationError is the validation error returned by
// ForwardingSetPropertyResp.Validate if the designated constraints aren't met.
type ForwardingSetPropertyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingSetPropertyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingSetPropertyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingSetPropertyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingSetPropertyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingSetPropertyRespValidationError) ErrorName() string {
	return "ForwardingSetPropertyRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingSetPropertyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingSetPropertyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingSetPropertyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingSetPropertyRespValidationError{}

// Validate checks the field values on ForwardingSetPropertiesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingSetPropertiesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingSetPropertiesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingSetPropertiesReqMultiError, or nil if none found.
func (m *ForwardingSetPropertiesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingSetPropertiesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ForwardingSetPropertiesReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ContextId

	// no validation rules for Payload

	// no validation rules for Timeout

	if len(errors) > 0 {
		return ForwardingSetPropertiesReqMultiError(errors)
	}

	return nil
}

// ForwardingSetPropertiesReqMultiError is an error wrapping multiple
// validation errors returned by ForwardingSetPropertiesReq.ValidateAll() if
// the designated constraints aren't met.
type ForwardingSetPropertiesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingSetPropertiesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingSetPropertiesReqMultiError) AllErrors() []error { return m }

// ForwardingSetPropertiesReqValidationError is the validation error returned
// by ForwardingSetPropertiesReq.Validate if the designated constraints aren't met.
type ForwardingSetPropertiesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingSetPropertiesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingSetPropertiesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingSetPropertiesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingSetPropertiesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingSetPropertiesReqValidationError) ErrorName() string {
	return "ForwardingSetPropertiesReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingSetPropertiesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingSetPropertiesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingSetPropertiesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingSetPropertiesReqValidationError{}

// Validate checks the field values on ForwardingSetPropertiesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingSetPropertiesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingSetPropertiesResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingSetPropertiesRespMultiError, or nil if none found.
func (m *ForwardingSetPropertiesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingSetPropertiesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetM()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardingSetPropertiesRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardingSetPropertiesRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetM()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardingSetPropertiesRespValidationError{
				field:  "M",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardingSetPropertiesRespMultiError(errors)
	}

	return nil
}

// ForwardingSetPropertiesRespMultiError is an error wrapping multiple
// validation errors returned by ForwardingSetPropertiesResp.ValidateAll() if
// the designated constraints aren't met.
type ForwardingSetPropertiesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingSetPropertiesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingSetPropertiesRespMultiError) AllErrors() []error { return m }

// ForwardingSetPropertiesRespValidationError is the validation error returned
// by ForwardingSetPropertiesResp.Validate if the designated constraints
// aren't met.
type ForwardingSetPropertiesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingSetPropertiesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingSetPropertiesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingSetPropertiesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingSetPropertiesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingSetPropertiesRespValidationError) ErrorName() string {
	return "ForwardingSetPropertiesRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingSetPropertiesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingSetPropertiesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingSetPropertiesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingSetPropertiesRespValidationError{}

// Validate checks the field values on ForwardingServiceReplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingServiceReplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingServiceReplyReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingServiceReplyReqMultiError, or nil if none found.
func (m *ForwardingServiceReplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingServiceReplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ForwardingServiceReplyReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContextId()) < 1 {
		err := ForwardingServiceReplyReqValidationError{
			field:  "ContextId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ForwardingServiceReplyReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	if len(errors) > 0 {
		return ForwardingServiceReplyReqMultiError(errors)
	}

	return nil
}

// ForwardingServiceReplyReqMultiError is an error wrapping multiple validation
// errors returned by ForwardingServiceReplyReq.ValidateAll() if the
// designated constraints aren't met.
type ForwardingServiceReplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingServiceReplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingServiceReplyReqMultiError) AllErrors() []error { return m }

// ForwardingServiceReplyReqValidationError is the validation error returned by
// ForwardingServiceReplyReq.Validate if the designated constraints aren't met.
type ForwardingServiceReplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingServiceReplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingServiceReplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingServiceReplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingServiceReplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingServiceReplyReqValidationError) ErrorName() string {
	return "ForwardingServiceReplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingServiceReplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingServiceReplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingServiceReplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingServiceReplyReqValidationError{}

// Validate checks the field values on ForwardingServiceReplyResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingServiceReplyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingServiceReplyResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingServiceReplyRespMultiError, or nil if none found.
func (m *ForwardingServiceReplyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingServiceReplyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return ForwardingServiceReplyRespMultiError(errors)
	}

	return nil
}

// ForwardingServiceReplyRespMultiError is an error wrapping multiple
// validation errors returned by ForwardingServiceReplyResp.ValidateAll() if
// the designated constraints aren't met.
type ForwardingServiceReplyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingServiceReplyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingServiceReplyRespMultiError) AllErrors() []error { return m }

// ForwardingServiceReplyRespValidationError is the validation error returned
// by ForwardingServiceReplyResp.Validate if the designated constraints aren't met.
type ForwardingServiceReplyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingServiceReplyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingServiceReplyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingServiceReplyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingServiceReplyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingServiceReplyRespValidationError) ErrorName() string {
	return "ForwardingServiceReplyRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingServiceReplyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingServiceReplyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingServiceReplyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingServiceReplyRespValidationError{}

// Validate checks the field values on ForwardingPublishMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingPublishMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingPublishMsgReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPublishMsgReqMultiError, or nil if none found.
func (m *ForwardingPublishMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingPublishMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sn

	// no validation rules for ContextId

	// no validation rules for MsgType

	// no validation rules for Code

	// no validation rules for Topic

	// no validation rules for UseTopic

	// no validation rules for Payload

	// no validation rules for Timeout

	if len(errors) > 0 {
		return ForwardingPublishMsgReqMultiError(errors)
	}

	return nil
}

// ForwardingPublishMsgReqMultiError is an error wrapping multiple validation
// errors returned by ForwardingPublishMsgReq.ValidateAll() if the designated
// constraints aren't met.
type ForwardingPublishMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPublishMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPublishMsgReqMultiError) AllErrors() []error { return m }

// ForwardingPublishMsgReqValidationError is the validation error returned by
// ForwardingPublishMsgReq.Validate if the designated constraints aren't met.
type ForwardingPublishMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPublishMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPublishMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPublishMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPublishMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPublishMsgReqValidationError) ErrorName() string {
	return "ForwardingPublishMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPublishMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingPublishMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPublishMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPublishMsgReqValidationError{}

// Validate checks the field values on ForwardingPublishMsgResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingPublishMsgResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingPublishMsgResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingPublishMsgRespMultiError, or nil if none found.
func (m *ForwardingPublishMsgResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingPublishMsgResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetM()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardingPublishMsgRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardingPublishMsgRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetM()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardingPublishMsgRespValidationError{
				field:  "M",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardingPublishMsgRespMultiError(errors)
	}

	return nil
}

// ForwardingPublishMsgRespMultiError is an error wrapping multiple validation
// errors returned by ForwardingPublishMsgResp.ValidateAll() if the designated
// constraints aren't met.
type ForwardingPublishMsgRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingPublishMsgRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingPublishMsgRespMultiError) AllErrors() []error { return m }

// ForwardingPublishMsgRespValidationError is the validation error returned by
// ForwardingPublishMsgResp.Validate if the designated constraints aren't met.
type ForwardingPublishMsgRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingPublishMsgRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingPublishMsgRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingPublishMsgRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingPublishMsgRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingPublishMsgRespValidationError) ErrorName() string {
	return "ForwardingPublishMsgRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingPublishMsgRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingPublishMsgResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingPublishMsgRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingPublishMsgRespValidationError{}

// Validate checks the field values on ForwardingWatchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingWatchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingWatchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingWatchReqMultiError, or nil if none found.
func (m *ForwardingWatchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingWatchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetContextId()) < 1 {
		err := ForwardingWatchReqValidationError{
			field:  "ContextId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ForwardingWatchReqMultiError(errors)
	}

	return nil
}

// ForwardingWatchReqMultiError is an error wrapping multiple validation errors
// returned by ForwardingWatchReq.ValidateAll() if the designated constraints
// aren't met.
type ForwardingWatchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingWatchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingWatchReqMultiError) AllErrors() []error { return m }

// ForwardingWatchReqValidationError is the validation error returned by
// ForwardingWatchReq.Validate if the designated constraints aren't met.
type ForwardingWatchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingWatchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingWatchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingWatchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingWatchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingWatchReqValidationError) ErrorName() string {
	return "ForwardingWatchReqValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingWatchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingWatchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingWatchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingWatchReqValidationError{}

// Validate checks the field values on ForwardingWatchResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForwardingWatchResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForwardingWatchResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForwardingWatchRespMultiError, or nil if none found.
func (m *ForwardingWatchResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ForwardingWatchResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetM()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForwardingWatchRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForwardingWatchRespValidationError{
					field:  "M",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetM()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForwardingWatchRespValidationError{
				field:  "M",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForwardingWatchRespMultiError(errors)
	}

	return nil
}

// ForwardingWatchRespMultiError is an error wrapping multiple validation
// errors returned by ForwardingWatchResp.ValidateAll() if the designated
// constraints aren't met.
type ForwardingWatchRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForwardingWatchRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForwardingWatchRespMultiError) AllErrors() []error { return m }

// ForwardingWatchRespValidationError is the validation error returned by
// ForwardingWatchResp.Validate if the designated constraints aren't met.
type ForwardingWatchRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForwardingWatchRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForwardingWatchRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForwardingWatchRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForwardingWatchRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForwardingWatchRespValidationError) ErrorName() string {
	return "ForwardingWatchRespValidationError"
}

// Error satisfies the builtin error interface
func (e ForwardingWatchRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForwardingWatchResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForwardingWatchRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForwardingWatchRespValidationError{}

// Validate checks the field values on Shadow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shadow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shadow with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShadowMultiError, or nil if none found.
func (m *Shadow) ValidateAll() error {
	return m.validate(true)
}

func (m *Shadow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pk

	// no validation rules for Sn

	// no validation rules for Group

	// no validation rules for Shadow

	if len(errors) > 0 {
		return ShadowMultiError(errors)
	}

	return nil
}

// ShadowMultiError is an error wrapping multiple validation errors returned by
// Shadow.ValidateAll() if the designated constraints aren't met.
type ShadowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowMultiError) AllErrors() []error { return m }

// ShadowValidationError is the validation error returned by Shadow.Validate if
// the designated constraints aren't met.
type ShadowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowValidationError) ErrorName() string { return "ShadowValidationError" }

// Error satisfies the builtin error interface
func (e ShadowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowValidationError{}

// Validate checks the field values on ShadowAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowAddReqMultiError, or
// nil if none found.
func (m *ShadowAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ShadowAddReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ShadowAddReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := ShadowAddReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return ShadowAddReqMultiError(errors)
	}

	return nil
}

// ShadowAddReqMultiError is an error wrapping multiple validation errors
// returned by ShadowAddReq.ValidateAll() if the designated constraints aren't met.
type ShadowAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowAddReqMultiError) AllErrors() []error { return m }

// ShadowAddReqValidationError is the validation error returned by
// ShadowAddReq.Validate if the designated constraints aren't met.
type ShadowAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowAddReqValidationError) ErrorName() string { return "ShadowAddReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowAddReqValidationError{}

// Validate checks the field values on ShadowAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowAddResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowAddRespMultiError, or
// nil if none found.
func (m *ShadowAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ShadowAddRespMultiError(errors)
	}

	return nil
}

// ShadowAddRespMultiError is an error wrapping multiple validation errors
// returned by ShadowAddResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowAddRespMultiError) AllErrors() []error { return m }

// ShadowAddRespValidationError is the validation error returned by
// ShadowAddResp.Validate if the designated constraints aren't met.
type ShadowAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowAddRespValidationError) ErrorName() string { return "ShadowAddRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowAddRespValidationError{}

// Validate checks the field values on ShadowDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowDelReqMultiError, or
// nil if none found.
func (m *ShadowDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ShadowDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShadowDelReqMultiError(errors)
	}

	return nil
}

// ShadowDelReqMultiError is an error wrapping multiple validation errors
// returned by ShadowDelReq.ValidateAll() if the designated constraints aren't met.
type ShadowDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowDelReqMultiError) AllErrors() []error { return m }

// ShadowDelReqValidationError is the validation error returned by
// ShadowDelReq.Validate if the designated constraints aren't met.
type ShadowDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowDelReqValidationError) ErrorName() string { return "ShadowDelReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowDelReqValidationError{}

// Validate checks the field values on ShadowDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowDelRespMultiError, or
// nil if none found.
func (m *ShadowDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ShadowDelRespMultiError(errors)
	}

	return nil
}

// ShadowDelRespMultiError is an error wrapping multiple validation errors
// returned by ShadowDelResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowDelRespMultiError) AllErrors() []error { return m }

// ShadowDelRespValidationError is the validation error returned by
// ShadowDelResp.Validate if the designated constraints aren't met.
type ShadowDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowDelRespValidationError) ErrorName() string { return "ShadowDelRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowDelRespValidationError{}

// Validate checks the field values on ShadowUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShadowUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowUpdateReqMultiError, or nil if none found.
func (m *ShadowUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ShadowUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := ShadowUpdateReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := ShadowUpdateReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PSn

	// no validation rules for PId

	if len(errors) > 0 {
		return ShadowUpdateReqMultiError(errors)
	}

	return nil
}

// ShadowUpdateReqMultiError is an error wrapping multiple validation errors
// returned by ShadowUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type ShadowUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowUpdateReqMultiError) AllErrors() []error { return m }

// ShadowUpdateReqValidationError is the validation error returned by
// ShadowUpdateReq.Validate if the designated constraints aren't met.
type ShadowUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowUpdateReqValidationError) ErrorName() string { return "ShadowUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowUpdateReqValidationError{}

// Validate checks the field values on ShadowUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShadowUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShadowUpdateRespMultiError, or nil if none found.
func (m *ShadowUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ShadowUpdateRespMultiError(errors)
	}

	return nil
}

// ShadowUpdateRespMultiError is an error wrapping multiple validation errors
// returned by ShadowUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowUpdateRespMultiError) AllErrors() []error { return m }

// ShadowUpdateRespValidationError is the validation error returned by
// ShadowUpdateResp.Validate if the designated constraints aren't met.
type ShadowUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowUpdateRespValidationError) ErrorName() string { return "ShadowUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowUpdateRespValidationError{}

// Validate checks the field values on ShadowGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowGetReqMultiError, or
// nil if none found.
func (m *ShadowGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ShadowGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShadowGetReqMultiError(errors)
	}

	return nil
}

// ShadowGetReqMultiError is an error wrapping multiple validation errors
// returned by ShadowGetReq.ValidateAll() if the designated constraints aren't met.
type ShadowGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowGetReqMultiError) AllErrors() []error { return m }

// ShadowGetReqValidationError is the validation error returned by
// ShadowGetReq.Validate if the designated constraints aren't met.
type ShadowGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowGetReqValidationError) ErrorName() string { return "ShadowGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowGetReqValidationError{}

// Validate checks the field values on ShadowGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowGetRespMultiError, or
// nil if none found.
func (m *ShadowGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShadowGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShadowGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShadowGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShadowGetRespMultiError(errors)
	}

	return nil
}

// ShadowGetRespMultiError is an error wrapping multiple validation errors
// returned by ShadowGetResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowGetRespMultiError) AllErrors() []error { return m }

// ShadowGetRespValidationError is the validation error returned by
// ShadowGetResp.Validate if the designated constraints aren't met.
type ShadowGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowGetRespValidationError) ErrorName() string { return "ShadowGetRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowGetRespValidationError{}

// Validate checks the field values on ShadowListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowListReqMultiError, or
// nil if none found.
func (m *ShadowListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShadowListReqMultiError(errors)
	}

	return nil
}

// ShadowListReqMultiError is an error wrapping multiple validation errors
// returned by ShadowListReq.ValidateAll() if the designated constraints
// aren't met.
type ShadowListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowListReqMultiError) AllErrors() []error { return m }

// ShadowListReqValidationError is the validation error returned by
// ShadowListReq.Validate if the designated constraints aren't met.
type ShadowListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowListReqValidationError) ErrorName() string { return "ShadowListReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowListReqValidationError{}

// Validate checks the field values on ShadowListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowListRespMultiError,
// or nil if none found.
func (m *ShadowListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShadowListRespMultiError(errors)
	}

	return nil
}

// ShadowListRespMultiError is an error wrapping multiple validation errors
// returned by ShadowListResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowListRespMultiError) AllErrors() []error { return m }

// ShadowListRespValidationError is the validation error returned by
// ShadowListResp.Validate if the designated constraints aren't met.
type ShadowListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowListRespValidationError) ErrorName() string { return "ShadowListRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowListRespValidationError{}

// Validate checks the field values on ShadowPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowPageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowPageReqMultiError, or
// nil if none found.
func (m *ShadowPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := ShadowPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShadowPageReqMultiError(errors)
	}

	return nil
}

// ShadowPageReqMultiError is an error wrapping multiple validation errors
// returned by ShadowPageReq.ValidateAll() if the designated constraints
// aren't met.
type ShadowPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowPageReqMultiError) AllErrors() []error { return m }

// ShadowPageReqValidationError is the validation error returned by
// ShadowPageReq.Validate if the designated constraints aren't met.
type ShadowPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowPageReqValidationError) ErrorName() string { return "ShadowPageReqValidationError" }

// Error satisfies the builtin error interface
func (e ShadowPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowPageReqValidationError{}

// Validate checks the field values on ShadowPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShadowPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShadowPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShadowPageRespMultiError,
// or nil if none found.
func (m *ShadowPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ShadowPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShadowPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShadowPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShadowPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShadowPageRespMultiError(errors)
	}

	return nil
}

// ShadowPageRespMultiError is an error wrapping multiple validation errors
// returned by ShadowPageResp.ValidateAll() if the designated constraints
// aren't met.
type ShadowPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShadowPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShadowPageRespMultiError) AllErrors() []error { return m }

// ShadowPageRespValidationError is the validation error returned by
// ShadowPageResp.Validate if the designated constraints aren't met.
type ShadowPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShadowPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShadowPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShadowPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShadowPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShadowPageRespValidationError) ErrorName() string { return "ShadowPageRespValidationError" }

// Error satisfies the builtin error interface
func (e ShadowPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShadowPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShadowPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShadowPageRespValidationError{}

// Validate checks the field values on MsgLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgLog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MsgLogMultiError, or nil if none found.
func (m *MsgLog) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pk

	// no validation rules for Sn

	// no validation rules for Content

	// no validation rules for Topic

	// no validation rules for LogType

	// no validation rules for Dir

	// no validation rules for CreateTime

	// no validation rules for MsgId

	// no validation rules for ContextId

	// no validation rules for Result

	// no validation rules for Code

	if len(errors) > 0 {
		return MsgLogMultiError(errors)
	}

	return nil
}

// MsgLogMultiError is an error wrapping multiple validation errors returned by
// MsgLog.ValidateAll() if the designated constraints aren't met.
type MsgLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgLogMultiError) AllErrors() []error { return m }

// MsgLogValidationError is the validation error returned by MsgLog.Validate if
// the designated constraints aren't met.
type MsgLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgLogValidationError) ErrorName() string { return "MsgLogValidationError" }

// Error satisfies the builtin error interface
func (e MsgLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgLogValidationError{}

// Validate checks the field values on MsgLogPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgLogPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgLogPageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgLogPageReqMultiError, or
// nil if none found.
func (m *MsgLogPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgLogPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := MsgLogPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Pk

	// no validation rules for Sn

	// no validation rules for MsgId

	// no validation rules for ContextId

	// no validation rules for Dir

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Code

	if len(errors) > 0 {
		return MsgLogPageReqMultiError(errors)
	}

	return nil
}

// MsgLogPageReqMultiError is an error wrapping multiple validation errors
// returned by MsgLogPageReq.ValidateAll() if the designated constraints
// aren't met.
type MsgLogPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgLogPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgLogPageReqMultiError) AllErrors() []error { return m }

// MsgLogPageReqValidationError is the validation error returned by
// MsgLogPageReq.Validate if the designated constraints aren't met.
type MsgLogPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgLogPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgLogPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgLogPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgLogPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgLogPageReqValidationError) ErrorName() string { return "MsgLogPageReqValidationError" }

// Error satisfies the builtin error interface
func (e MsgLogPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgLogPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgLogPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgLogPageReqValidationError{}

// Validate checks the field values on MsgLogPageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgLogPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgLogPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgLogPageRespMultiError,
// or nil if none found.
func (m *MsgLogPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgLogPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MsgLogPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MsgLogPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MsgLogPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MsgLogPageRespMultiError(errors)
	}

	return nil
}

// MsgLogPageRespMultiError is an error wrapping multiple validation errors
// returned by MsgLogPageResp.ValidateAll() if the designated constraints
// aren't met.
type MsgLogPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgLogPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgLogPageRespMultiError) AllErrors() []error { return m }

// MsgLogPageRespValidationError is the validation error returned by
// MsgLogPageResp.Validate if the designated constraints aren't met.
type MsgLogPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgLogPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgLogPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgLogPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgLogPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgLogPageRespValidationError) ErrorName() string { return "MsgLogPageRespValidationError" }

// Error satisfies the builtin error interface
func (e MsgLogPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgLogPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgLogPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgLogPageRespValidationError{}
