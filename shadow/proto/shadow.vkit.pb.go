// Code generated by protoc-gen-vkit. DO NOT EDIT.
// versions:
// - protoc-gen-vkit v1.0.0
// - protoc             v3.21.1
// source: shadow.proto

package proto

import (
	context "context"
	grpcx "github.com/visonlv/go-vkit/grpcx"
	grpc "google.golang.org/grpc"
)

var _ = new(context.Context)
var _ = new(grpc.CallOption)
var _ = new(grpcx.Client)

type ForwardingServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *ForwardingServiceClient) Properties(ctx context.Context, in *ForwardingPropertiesReq, opts ...grpc.CallOption) (*ForwardingPropertiesResp, error) {
	out := new(ForwardingPropertiesResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.Properties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ForwardingServiceClient) Service(ctx context.Context, in *ForwardingServiceReq, opts ...grpc.CallOption) (*ForwardingServiceResp, error) {
	out := new(ForwardingServiceResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ForwardingServiceClient) SetProperty(ctx context.Context, in *ForwardingSetPropertyReq, opts ...grpc.CallOption) (*ForwardingSetPropertyResp, error) {
	out := new(ForwardingSetPropertyResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.SetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ForwardingServiceClient) SetProperties(ctx context.Context, in *ForwardingSetPropertiesReq, opts ...grpc.CallOption) (*ForwardingSetPropertiesResp, error) {
	out := new(ForwardingSetPropertiesResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.SetProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ForwardingServiceClient) ServiceReply(ctx context.Context, in *ForwardingServiceReplyReq, opts ...grpc.CallOption) (*ForwardingServiceReplyResp, error) {
	out := new(ForwardingServiceReplyResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.ServiceReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ForwardingServiceClient) PublishMsg(ctx context.Context, in *ForwardingPublishMsgReq, opts ...grpc.CallOption) (*ForwardingPublishMsgResp, error) {
	out := new(ForwardingPublishMsgResp)
	err := c.cc.Invoke(ctx, c.name, "ForwardingService.PublishMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type ForwardingService_WatchClient struct {
	grpcx.ClientStream
}

func (x *ForwardingService_WatchClient) Recv() (*ForwardingWatchResp, error) {
	m := new(ForwardingWatchResp)
	if err := x.ClientStream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ForwardingServiceClient) Watch(ctx context.Context, in *ForwardingWatchReq, opts ...grpc.CallOption) (*ForwardingService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &grpc.StreamDesc{
		StreamName: "Watch", ServerStreams: true}, c.name, "ForwardingService.Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ForwardingService_WatchClient{stream}
	if err := x.ClientStream.Send(in); err != nil {
		return nil, err
	}
	return x, nil
}

func NewForwardingServiceClient(name string, cc grpcx.Client) *ForwardingServiceClient {
	return &ForwardingServiceClient{name, cc}
}

type ShadowServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *ShadowServiceClient) Add(ctx context.Context, in *ShadowAddReq, opts ...grpc.CallOption) (*ShadowAddResp, error) {
	out := new(ShadowAddResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ShadowServiceClient) Del(ctx context.Context, in *ShadowDelReq, opts ...grpc.CallOption) (*ShadowDelResp, error) {
	out := new(ShadowDelResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ShadowServiceClient) Update(ctx context.Context, in *ShadowUpdateReq, opts ...grpc.CallOption) (*ShadowUpdateResp, error) {
	out := new(ShadowUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ShadowServiceClient) Get(ctx context.Context, in *ShadowGetReq, opts ...grpc.CallOption) (*ShadowGetResp, error) {
	out := new(ShadowGetResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ShadowServiceClient) List(ctx context.Context, in *ShadowListReq, opts ...grpc.CallOption) (*ShadowListResp, error) {
	out := new(ShadowListResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ShadowServiceClient) Page(ctx context.Context, in *ShadowPageReq, opts ...grpc.CallOption) (*ShadowPageResp, error) {
	out := new(ShadowPageResp)
	err := c.cc.Invoke(ctx, c.name, "ShadowService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewShadowServiceClient(name string, cc grpcx.Client) *ShadowServiceClient {
	return &ShadowServiceClient{name, cc}
}

type MsgLogServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *MsgLogServiceClient) Page(ctx context.Context, in *MsgLogPageReq, opts ...grpc.CallOption) (*MsgLogPageResp, error) {
	out := new(MsgLogPageResp)
	err := c.cc.Invoke(ctx, c.name, "MsgLogService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewMsgLogServiceClient(name string, cc grpcx.Client) *MsgLogServiceClient {
	return &MsgLogServiceClient{name, cc}
}

type ForwardingService_WatchServer struct {
	grpc.ServerStream
}

func (x *ForwardingService_WatchServer) SetStream(s grpc.ServerStream) {
	x.ServerStream = s
}

func (x *ForwardingService_WatchServer) Send(m *ForwardingWatchResp) error {
	return x.ServerStream.SendMsg(m)
}
