// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/shadow/model"
	pb "github.com/visonlv/iot-engine/shadow/proto"
)

type MsgLogService struct {
}

func (the *MsgLogService) Page(ctx context.Context, req *pb.MsgLogPageReq, resp *pb.MsgLogPageResp) error {
	filter := &model.MsgLogFilter{
		Pk:        req.Pk,
		Sn:        req.Sn,
		LogTypes:  req.LogTypes,
		Topics:    req.Topics,
		MsgId:     req.MsgId,
		ContextId: req.ContextId,
		Dir:       req.Dir,
		Code:      req.Code,
	}

	orders := make([]model.OrderBy, 0)
	orders = append(orders, model.OrderBy{Filed: "ts", Sort: 1})
	page := &model.PageInfo{
		TimeStart: req.StartTime,
		TimeEnd:   req.EndTime,
		Page:      int64(req.PageIndex),
		Size:      int64(req.PageSize),
		Orders:    orders,
	}
	total, err := model.MsgLogCount(context.Background(), filter, page)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取总数量 %s", err.Error())
		return nil
	}

	list, err := model.MsgLogPage(context.Background(), filter, page)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页数据失败 %s", err.Error())
		return nil
	}

	newList := make([]*pb.MsgLog, 0)
	for _, v := range list {
		item := &pb.MsgLog{}
		utilsx.DeepCopy(v, item)
		item.CreateTime = v.Ts.UnixMilli()
		newList = append(newList, item)
	}

	resp.Total = int32(total)
	resp.Items = newList
	return nil
}
