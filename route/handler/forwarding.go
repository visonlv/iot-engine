// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/logger"
	"github.com/visonlv/iot-engine/route/handler/forwarding"
	pb "github.com/visonlv/iot-engine/shadow/proto"
)

type ForwardingService struct {
}

func (the *ForwardingService) Properties(ctx context.Context, req *pb.ForwardingPropertiesReq, resp *pb.ForwardingPropertiesResp) error {
	if len(req.Pks) > 0 && len(req.Sns) > 0 {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "不可同时指定产品标识跟设备标识"
		return nil
	}

	return forwarding.Properties(ctx, req, resp)
}

func (the *ForwardingService) Service(ctx context.Context, req *pb.ForwardingServiceReq, resp *pb.ForwardingServiceResp) error {
	c, err := forwarding.GetClient(req.Sn)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	newResp, err := c.Service(ctx, req)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	resp.Code = newResp.Code
	resp.Msg = newResp.Msg
	resp.M = newResp.M
	return nil
}

func (the *ForwardingService) SetProperty(ctx context.Context, req *pb.ForwardingSetPropertyReq, resp *pb.ForwardingSetPropertyResp) error {
	c, err := forwarding.GetClient(req.Sn)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	newResp, err := c.SetProperty(ctx, req)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	resp.Code = newResp.Code
	resp.Msg = newResp.Msg
	resp.M = newResp.M
	return nil
}

func (the *ForwardingService) SetProperties(ctx context.Context, req *pb.ForwardingSetPropertiesReq, resp *pb.ForwardingSetPropertiesResp) error {
	c, err := forwarding.GetClient(req.Sn)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	newResp, err := c.SetProperties(ctx, req)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	resp.Code = newResp.Code
	resp.Msg = newResp.Msg
	resp.M = newResp.M
	return nil
}

func (the *ForwardingService) ServiceReply(ctx context.Context, req *pb.ForwardingServiceReplyReq, resp *pb.ForwardingServiceReplyResp) error {
	c, err := forwarding.GetClient(req.Sn)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	newResp, err := c.ServiceReply(ctx, req)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	resp.Code = newResp.Code
	resp.Msg = newResp.Msg
	return nil
}

func (the *ForwardingService) Watch(ctx context.Context, req *pb.ForwardingWatchReq, s *pb.ForwardingService_WatchServer) error {
	// 发送错误信息
	errMsg := &pb.ForwardingWatchResp{}
	defer func() {
		if errMsg.Code != 0 {
			err := s.Send(errMsg)
			if err != nil {
				logger.Infof("send msg fail:%s", err.Error())
			}
		}
	}()
	if len(req.Pks) > 0 && len(req.Sns) > 0 {
		errMsg.Code = errorsx.FAIL.Code
		errMsg.Msg = "不可同时指定产品标识跟设备标识"
		return nil
	}

	if len(req.Codes) > 0 && len(req.MsgTypes) > 1 {
		errMsg.Code = errorsx.FAIL.Code
		errMsg.Msg = "指定代码只能最多支持一种类型"
		return nil
	}

	return forwarding.Watch(ctx, req, s)
}
