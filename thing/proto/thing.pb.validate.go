// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: thing.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pk

	// no validation rules for Name

	// no validation rules for Sn

	// no validation rules for Group

	// no validation rules for Secret

	// no validation rules for Desc

	// no validation rules for CreateTime

	// no validation rules for Online

	// no validation rules for PId

	// no validation rules for PName

	// no validation rules for ProductType

	// no validation rules for ProductName

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

// Validate checks the field values on DeviceAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceAddReqMultiError, or
// nil if none found.
func (m *DeviceAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := DeviceAddReqValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeviceAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSn()) < 1 {
		err := DeviceAddReqValidationError{
			field:  "Sn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecret()) < 1 {
		err := DeviceAddReqValidationError{
			field:  "Secret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PId

	// no validation rules for Desc

	if len(errors) > 0 {
		return DeviceAddReqMultiError(errors)
	}

	return nil
}

// DeviceAddReqMultiError is an error wrapping multiple validation errors
// returned by DeviceAddReq.ValidateAll() if the designated constraints aren't met.
type DeviceAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceAddReqMultiError) AllErrors() []error { return m }

// DeviceAddReqValidationError is the validation error returned by
// DeviceAddReq.Validate if the designated constraints aren't met.
type DeviceAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceAddReqValidationError) ErrorName() string { return "DeviceAddReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceAddReqValidationError{}

// Validate checks the field values on DeviceAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceAddResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceAddRespMultiError, or
// nil if none found.
func (m *DeviceAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceAddRespMultiError(errors)
	}

	return nil
}

// DeviceAddRespMultiError is an error wrapping multiple validation errors
// returned by DeviceAddResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceAddRespMultiError) AllErrors() []error { return m }

// DeviceAddRespValidationError is the validation error returned by
// DeviceAddResp.Validate if the designated constraints aren't met.
type DeviceAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceAddRespValidationError) ErrorName() string { return "DeviceAddRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceAddRespValidationError{}

// Validate checks the field values on DeviceDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceDelReqMultiError, or
// nil if none found.
func (m *DeviceDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeviceDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeviceDelReqMultiError(errors)
	}

	return nil
}

// DeviceDelReqMultiError is an error wrapping multiple validation errors
// returned by DeviceDelReq.ValidateAll() if the designated constraints aren't met.
type DeviceDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDelReqMultiError) AllErrors() []error { return m }

// DeviceDelReqValidationError is the validation error returned by
// DeviceDelReq.Validate if the designated constraints aren't met.
type DeviceDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDelReqValidationError) ErrorName() string { return "DeviceDelReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDelReqValidationError{}

// Validate checks the field values on DeviceDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceDelRespMultiError, or
// nil if none found.
func (m *DeviceDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceDelRespMultiError(errors)
	}

	return nil
}

// DeviceDelRespMultiError is an error wrapping multiple validation errors
// returned by DeviceDelResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceDelRespMultiError) AllErrors() []error { return m }

// DeviceDelRespValidationError is the validation error returned by
// DeviceDelResp.Validate if the designated constraints aren't met.
type DeviceDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceDelRespValidationError) ErrorName() string { return "DeviceDelRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceDelRespValidationError{}

// Validate checks the field values on DeviceUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceUpdateReqMultiError, or nil if none found.
func (m *DeviceUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeviceUpdateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeviceUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecret()) < 1 {
		err := DeviceUpdateReqValidationError{
			field:  "Secret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for PId

	if len(errors) > 0 {
		return DeviceUpdateReqMultiError(errors)
	}

	return nil
}

// DeviceUpdateReqMultiError is an error wrapping multiple validation errors
// returned by DeviceUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceUpdateReqMultiError) AllErrors() []error { return m }

// DeviceUpdateReqValidationError is the validation error returned by
// DeviceUpdateReq.Validate if the designated constraints aren't met.
type DeviceUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceUpdateReqValidationError) ErrorName() string { return "DeviceUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceUpdateReqValidationError{}

// Validate checks the field values on DeviceUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeviceUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceUpdateRespMultiError, or nil if none found.
func (m *DeviceUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return DeviceUpdateRespMultiError(errors)
	}

	return nil
}

// DeviceUpdateRespMultiError is an error wrapping multiple validation errors
// returned by DeviceUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceUpdateRespMultiError) AllErrors() []error { return m }

// DeviceUpdateRespValidationError is the validation error returned by
// DeviceUpdateResp.Validate if the designated constraints aren't met.
type DeviceUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceUpdateRespValidationError) ErrorName() string { return "DeviceUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceUpdateRespValidationError{}

// Validate checks the field values on DeviceGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceGetReqMultiError, or
// nil if none found.
func (m *DeviceGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeviceGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeviceGetReqMultiError(errors)
	}

	return nil
}

// DeviceGetReqMultiError is an error wrapping multiple validation errors
// returned by DeviceGetReq.ValidateAll() if the designated constraints aren't met.
type DeviceGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceGetReqMultiError) AllErrors() []error { return m }

// DeviceGetReqValidationError is the validation error returned by
// DeviceGetReq.Validate if the designated constraints aren't met.
type DeviceGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceGetReqValidationError) ErrorName() string { return "DeviceGetReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceGetReqValidationError{}

// Validate checks the field values on DeviceGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceGetRespMultiError, or
// nil if none found.
func (m *DeviceGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceGetRespMultiError(errors)
	}

	return nil
}

// DeviceGetRespMultiError is an error wrapping multiple validation errors
// returned by DeviceGetResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceGetRespMultiError) AllErrors() []error { return m }

// DeviceGetRespValidationError is the validation error returned by
// DeviceGetResp.Validate if the designated constraints aren't met.
type DeviceGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceGetRespValidationError) ErrorName() string { return "DeviceGetRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceGetRespValidationError{}

// Validate checks the field values on DeviceListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceListReqMultiError, or
// nil if none found.
func (m *DeviceListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pk

	// no validation rules for Name

	// no validation rules for Sn

	// no validation rules for PId

	if len(errors) > 0 {
		return DeviceListReqMultiError(errors)
	}

	return nil
}

// DeviceListReqMultiError is an error wrapping multiple validation errors
// returned by DeviceListReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListReqMultiError) AllErrors() []error { return m }

// DeviceListReqValidationError is the validation error returned by
// DeviceListReq.Validate if the designated constraints aren't met.
type DeviceListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListReqValidationError) ErrorName() string { return "DeviceListReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListReqValidationError{}

// Validate checks the field values on DeviceListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceListRespMultiError,
// or nil if none found.
func (m *DeviceListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceListRespMultiError(errors)
	}

	return nil
}

// DeviceListRespMultiError is an error wrapping multiple validation errors
// returned by DeviceListResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListRespMultiError) AllErrors() []error { return m }

// DeviceListRespValidationError is the validation error returned by
// DeviceListResp.Validate if the designated constraints aren't met.
type DeviceListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListRespValidationError) ErrorName() string { return "DeviceListRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListRespValidationError{}

// Validate checks the field values on DeviceListGatewayReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceListGatewayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListGatewayReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceListGatewayReqMultiError, or nil if none found.
func (m *DeviceListGatewayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListGatewayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceListGatewayReqMultiError(errors)
	}

	return nil
}

// DeviceListGatewayReqMultiError is an error wrapping multiple validation
// errors returned by DeviceListGatewayReq.ValidateAll() if the designated
// constraints aren't met.
type DeviceListGatewayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListGatewayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListGatewayReqMultiError) AllErrors() []error { return m }

// DeviceListGatewayReqValidationError is the validation error returned by
// DeviceListGatewayReq.Validate if the designated constraints aren't met.
type DeviceListGatewayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListGatewayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListGatewayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListGatewayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListGatewayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListGatewayReqValidationError) ErrorName() string {
	return "DeviceListGatewayReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceListGatewayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListGatewayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListGatewayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListGatewayReqValidationError{}

// Validate checks the field values on DeviceListGatewayResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceListGatewayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListGatewayResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceListGatewayRespMultiError, or nil if none found.
func (m *DeviceListGatewayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListGatewayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceListGatewayRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceListGatewayRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceListGatewayRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceListGatewayRespMultiError(errors)
	}

	return nil
}

// DeviceListGatewayRespMultiError is an error wrapping multiple validation
// errors returned by DeviceListGatewayResp.ValidateAll() if the designated
// constraints aren't met.
type DeviceListGatewayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListGatewayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListGatewayRespMultiError) AllErrors() []error { return m }

// DeviceListGatewayRespValidationError is the validation error returned by
// DeviceListGatewayResp.Validate if the designated constraints aren't met.
type DeviceListGatewayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListGatewayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListGatewayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListGatewayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListGatewayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListGatewayRespValidationError) ErrorName() string {
	return "DeviceListGatewayRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceListGatewayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListGatewayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListGatewayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListGatewayRespValidationError{}

// Validate checks the field values on DevicePageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevicePageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevicePageReqMultiError, or
// nil if none found.
func (m *DevicePageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := DevicePageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Pk

	// no validation rules for Name

	// no validation rules for Sn

	// no validation rules for PId

	if len(errors) > 0 {
		return DevicePageReqMultiError(errors)
	}

	return nil
}

// DevicePageReqMultiError is an error wrapping multiple validation errors
// returned by DevicePageReq.ValidateAll() if the designated constraints
// aren't met.
type DevicePageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePageReqMultiError) AllErrors() []error { return m }

// DevicePageReqValidationError is the validation error returned by
// DevicePageReq.Validate if the designated constraints aren't met.
type DevicePageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePageReqValidationError) ErrorName() string { return "DevicePageReqValidationError" }

// Error satisfies the builtin error interface
func (e DevicePageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePageReqValidationError{}

// Validate checks the field values on DevicePageResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DevicePageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevicePageRespMultiError,
// or nil if none found.
func (m *DevicePageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DevicePageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DevicePageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DevicePageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DevicePageRespMultiError(errors)
	}

	return nil
}

// DevicePageRespMultiError is an error wrapping multiple validation errors
// returned by DevicePageResp.ValidateAll() if the designated constraints
// aren't met.
type DevicePageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePageRespMultiError) AllErrors() []error { return m }

// DevicePageRespValidationError is the validation error returned by
// DevicePageResp.Validate if the designated constraints aren't met.
type DevicePageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePageRespValidationError) ErrorName() string { return "DevicePageRespValidationError" }

// Error satisfies the builtin error interface
func (e DevicePageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePageRespValidationError{}

// Validate checks the field values on DeviceAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceAuthReqMultiError, or
// nil if none found.
func (m *DeviceAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Supplier

	if len(errors) > 0 {
		return DeviceAuthReqMultiError(errors)
	}

	return nil
}

// DeviceAuthReqMultiError is an error wrapping multiple validation errors
// returned by DeviceAuthReq.ValidateAll() if the designated constraints
// aren't met.
type DeviceAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceAuthReqMultiError) AllErrors() []error { return m }

// DeviceAuthReqValidationError is the validation error returned by
// DeviceAuthReq.Validate if the designated constraints aren't met.
type DeviceAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceAuthReqValidationError) ErrorName() string { return "DeviceAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e DeviceAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceAuthReqValidationError{}

// Validate checks the field values on DeviceAuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceAuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceAuthResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceAuthRespMultiError,
// or nil if none found.
func (m *DeviceAuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceAuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Result

	// no validation rules for IsSuperuser

	if len(errors) > 0 {
		return DeviceAuthRespMultiError(errors)
	}

	return nil
}

// DeviceAuthRespMultiError is an error wrapping multiple validation errors
// returned by DeviceAuthResp.ValidateAll() if the designated constraints
// aren't met.
type DeviceAuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceAuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceAuthRespMultiError) AllErrors() []error { return m }

// DeviceAuthRespValidationError is the validation error returned by
// DeviceAuthResp.Validate if the designated constraints aren't met.
type DeviceAuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceAuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceAuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceAuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceAuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceAuthRespValidationError) ErrorName() string { return "DeviceAuthRespValidationError" }

// Error satisfies the builtin error interface
func (e DeviceAuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceAuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceAuthRespValidationError{}

// Validate checks the field values on DevicePropertiesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DevicePropertiesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePropertiesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevicePropertiesReqMultiError, or nil if none found.
func (m *DevicePropertiesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePropertiesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DevicePropertiesReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DevicePropertiesReqMultiError(errors)
	}

	return nil
}

// DevicePropertiesReqMultiError is an error wrapping multiple validation
// errors returned by DevicePropertiesReq.ValidateAll() if the designated
// constraints aren't met.
type DevicePropertiesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePropertiesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePropertiesReqMultiError) AllErrors() []error { return m }

// DevicePropertiesReqValidationError is the validation error returned by
// DevicePropertiesReq.Validate if the designated constraints aren't met.
type DevicePropertiesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePropertiesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePropertiesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePropertiesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePropertiesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePropertiesReqValidationError) ErrorName() string {
	return "DevicePropertiesReqValidationError"
}

// Error satisfies the builtin error interface
func (e DevicePropertiesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePropertiesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePropertiesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePropertiesReqValidationError{}

// Validate checks the field values on DeviceProperty with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceProperty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceProperty with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DevicePropertyMultiError,
// or nil if none found.
func (m *DeviceProperty) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceProperty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Type

	// no validation rules for Value

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return DevicePropertyMultiError(errors)
	}

	return nil
}

// DevicePropertyMultiError is an error wrapping multiple validation errors
// returned by DeviceProperty.ValidateAll() if the designated constraints
// aren't met.
type DevicePropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePropertyMultiError) AllErrors() []error { return m }

// DevicePropertyValidationError is the validation error returned by
// DeviceProperty.Validate if the designated constraints aren't met.
type DevicePropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePropertyValidationError) ErrorName() string { return "DevicePropertyValidationError" }

// Error satisfies the builtin error interface
func (e DevicePropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePropertyValidationError{}

// Validate checks the field values on DevicePropertiesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DevicePropertiesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DevicePropertiesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DevicePropertiesRespMultiError, or nil if none found.
func (m *DevicePropertiesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DevicePropertiesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DevicePropertiesRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DevicePropertiesRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DevicePropertiesRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DevicePropertiesRespMultiError(errors)
	}

	return nil
}

// DevicePropertiesRespMultiError is an error wrapping multiple validation
// errors returned by DevicePropertiesResp.ValidateAll() if the designated
// constraints aren't met.
type DevicePropertiesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevicePropertiesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevicePropertiesRespMultiError) AllErrors() []error { return m }

// DevicePropertiesRespValidationError is the validation error returned by
// DevicePropertiesResp.Validate if the designated constraints aren't met.
type DevicePropertiesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevicePropertiesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevicePropertiesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevicePropertiesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevicePropertiesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevicePropertiesRespValidationError) ErrorName() string {
	return "DevicePropertiesRespValidationError"
}

// Error satisfies the builtin error interface
func (e DevicePropertiesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevicePropertiesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevicePropertiesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevicePropertiesRespValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := ProductValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPk()) < 1 {
		err := ProductValidationError{
			field:  "Pk",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransform()) < 1 {
		err := ProductValidationError{
			field:  "Transform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProtocol()) < 1 {
		err := ProductValidationError{
			field:  "Protocol",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := ProductValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetThingDef()) < 1 {
		err := ProductValidationError{
			field:  "ThingDef",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on ProductAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductAddReqMultiError, or
// nil if none found.
func (m *ProductAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := ProductAddReqValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransform()) < 1 {
		err := ProductAddReqValidationError{
			field:  "Transform",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProtocol()) < 1 {
		err := ProductAddReqValidationError{
			field:  "Protocol",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := ProductAddReqValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return ProductAddReqMultiError(errors)
	}

	return nil
}

// ProductAddReqMultiError is an error wrapping multiple validation errors
// returned by ProductAddReq.ValidateAll() if the designated constraints
// aren't met.
type ProductAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductAddReqMultiError) AllErrors() []error { return m }

// ProductAddReqValidationError is the validation error returned by
// ProductAddReq.Validate if the designated constraints aren't met.
type ProductAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAddReqValidationError) ErrorName() string { return "ProductAddReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAddReqValidationError{}

// Validate checks the field values on ProductAddResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductAddResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductAddRespMultiError,
// or nil if none found.
func (m *ProductAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductAddRespMultiError(errors)
	}

	return nil
}

// ProductAddRespMultiError is an error wrapping multiple validation errors
// returned by ProductAddResp.ValidateAll() if the designated constraints
// aren't met.
type ProductAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductAddRespMultiError) AllErrors() []error { return m }

// ProductAddRespValidationError is the validation error returned by
// ProductAddResp.Validate if the designated constraints aren't met.
type ProductAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductAddRespValidationError) ErrorName() string { return "ProductAddRespValidationError" }

// Error satisfies the builtin error interface
func (e ProductAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductAddRespValidationError{}

// Validate checks the field values on ProductDelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductDelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductDelReqMultiError, or
// nil if none found.
func (m *ProductDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ProductDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductDelReqMultiError(errors)
	}

	return nil
}

// ProductDelReqMultiError is an error wrapping multiple validation errors
// returned by ProductDelReq.ValidateAll() if the designated constraints
// aren't met.
type ProductDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductDelReqMultiError) AllErrors() []error { return m }

// ProductDelReqValidationError is the validation error returned by
// ProductDelReq.Validate if the designated constraints aren't met.
type ProductDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDelReqValidationError) ErrorName() string { return "ProductDelReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDelReqValidationError{}

// Validate checks the field values on ProductDelResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductDelResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductDelRespMultiError,
// or nil if none found.
func (m *ProductDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductDelRespMultiError(errors)
	}

	return nil
}

// ProductDelRespMultiError is an error wrapping multiple validation errors
// returned by ProductDelResp.ValidateAll() if the designated constraints
// aren't met.
type ProductDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductDelRespMultiError) AllErrors() []error { return m }

// ProductDelRespValidationError is the validation error returned by
// ProductDelResp.Validate if the designated constraints aren't met.
type ProductDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductDelRespValidationError) ErrorName() string { return "ProductDelRespValidationError" }

// Error satisfies the builtin error interface
func (e ProductDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductDelRespValidationError{}

// Validate checks the field values on ProductUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateReqMultiError, or nil if none found.
func (m *ProductUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := ProductUpdateReqValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return ProductUpdateReqMultiError(errors)
	}

	return nil
}

// ProductUpdateReqMultiError is an error wrapping multiple validation errors
// returned by ProductUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type ProductUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateReqMultiError) AllErrors() []error { return m }

// ProductUpdateReqValidationError is the validation error returned by
// ProductUpdateReq.Validate if the designated constraints aren't met.
type ProductUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateReqValidationError) ErrorName() string { return "ProductUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateReqValidationError{}

// Validate checks the field values on ProductUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateRespMultiError, or nil if none found.
func (m *ProductUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductUpdateRespMultiError(errors)
	}

	return nil
}

// ProductUpdateRespMultiError is an error wrapping multiple validation errors
// returned by ProductUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type ProductUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateRespMultiError) AllErrors() []error { return m }

// ProductUpdateRespValidationError is the validation error returned by
// ProductUpdateResp.Validate if the designated constraints aren't met.
type ProductUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateRespValidationError) ErrorName() string {
	return "ProductUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateRespValidationError{}

// Validate checks the field values on ProductGetReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductGetReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductGetReqMultiError, or
// nil if none found.
func (m *ProductGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pk

	if len(errors) > 0 {
		return ProductGetReqMultiError(errors)
	}

	return nil
}

// ProductGetReqMultiError is an error wrapping multiple validation errors
// returned by ProductGetReq.ValidateAll() if the designated constraints
// aren't met.
type ProductGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductGetReqMultiError) AllErrors() []error { return m }

// ProductGetReqValidationError is the validation error returned by
// ProductGetReq.Validate if the designated constraints aren't met.
type ProductGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductGetReqValidationError) ErrorName() string { return "ProductGetReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductGetReqValidationError{}

// Validate checks the field values on ProductGetResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductGetResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductGetRespMultiError,
// or nil if none found.
func (m *ProductGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductGetRespMultiError(errors)
	}

	return nil
}

// ProductGetRespMultiError is an error wrapping multiple validation errors
// returned by ProductGetResp.ValidateAll() if the designated constraints
// aren't met.
type ProductGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductGetRespMultiError) AllErrors() []error { return m }

// ProductGetRespValidationError is the validation error returned by
// ProductGetResp.Validate if the designated constraints aren't met.
type ProductGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductGetRespValidationError) ErrorName() string { return "ProductGetRespValidationError" }

// Error satisfies the builtin error interface
func (e ProductGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductGetRespValidationError{}

// Validate checks the field values on ProductListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductListReqMultiError,
// or nil if none found.
func (m *ProductListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Model

	// no validation rules for Pk

	// no validation rules for Type

	// no validation rules for LoadModelDef

	if len(errors) > 0 {
		return ProductListReqMultiError(errors)
	}

	return nil
}

// ProductListReqMultiError is an error wrapping multiple validation errors
// returned by ProductListReq.ValidateAll() if the designated constraints
// aren't met.
type ProductListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductListReqMultiError) AllErrors() []error { return m }

// ProductListReqValidationError is the validation error returned by
// ProductListReq.Validate if the designated constraints aren't met.
type ProductListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductListReqValidationError) ErrorName() string { return "ProductListReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductListReqValidationError{}

// Validate checks the field values on ProductListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductListRespMultiError, or nil if none found.
func (m *ProductListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductListRespMultiError(errors)
	}

	return nil
}

// ProductListRespMultiError is an error wrapping multiple validation errors
// returned by ProductListResp.ValidateAll() if the designated constraints
// aren't met.
type ProductListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductListRespMultiError) AllErrors() []error { return m }

// ProductListRespValidationError is the validation error returned by
// ProductListResp.Validate if the designated constraints aren't met.
type ProductListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductListRespValidationError) ErrorName() string { return "ProductListRespValidationError" }

// Error satisfies the builtin error interface
func (e ProductListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductListRespValidationError{}

// Validate checks the field values on ProductPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductPageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductPageReqMultiError,
// or nil if none found.
func (m *ProductPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := ProductPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Model

	// no validation rules for Pk

	// no validation rules for Type

	if len(errors) > 0 {
		return ProductPageReqMultiError(errors)
	}

	return nil
}

// ProductPageReqMultiError is an error wrapping multiple validation errors
// returned by ProductPageReq.ValidateAll() if the designated constraints
// aren't met.
type ProductPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductPageReqMultiError) AllErrors() []error { return m }

// ProductPageReqValidationError is the validation error returned by
// ProductPageReq.Validate if the designated constraints aren't met.
type ProductPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductPageReqValidationError) ErrorName() string { return "ProductPageReqValidationError" }

// Error satisfies the builtin error interface
func (e ProductPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductPageReqValidationError{}

// Validate checks the field values on ProductPageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductPageRespMultiError, or nil if none found.
func (m *ProductPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductPageRespMultiError(errors)
	}

	return nil
}

// ProductPageRespMultiError is an error wrapping multiple validation errors
// returned by ProductPageResp.ValidateAll() if the designated constraints
// aren't met.
type ProductPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductPageRespMultiError) AllErrors() []error { return m }

// ProductPageRespValidationError is the validation error returned by
// ProductPageResp.Validate if the designated constraints aren't met.
type ProductPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductPageRespValidationError) ErrorName() string { return "ProductPageRespValidationError" }

// Error satisfies the builtin error interface
func (e ProductPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductPageRespValidationError{}

// Validate checks the field values on ProductGetModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductGetModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductGetModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductGetModelReqMultiError, or nil if none found.
func (m *ProductGetModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductGetModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductGetModelReqMultiError(errors)
	}

	return nil
}

// ProductGetModelReqMultiError is an error wrapping multiple validation errors
// returned by ProductGetModelReq.ValidateAll() if the designated constraints
// aren't met.
type ProductGetModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductGetModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductGetModelReqMultiError) AllErrors() []error { return m }

// ProductGetModelReqValidationError is the validation error returned by
// ProductGetModelReq.Validate if the designated constraints aren't met.
type ProductGetModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductGetModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductGetModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductGetModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductGetModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductGetModelReqValidationError) ErrorName() string {
	return "ProductGetModelReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductGetModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductGetModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductGetModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductGetModelReqValidationError{}

// Validate checks the field values on ProductGetModelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductGetModelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductGetModelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductGetModelRespMultiError, or nil if none found.
func (m *ProductGetModelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductGetModelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductGetModelRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductGetModelRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductGetModelRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductGetModelRespMultiError(errors)
	}

	return nil
}

// ProductGetModelRespMultiError is an error wrapping multiple validation
// errors returned by ProductGetModelResp.ValidateAll() if the designated
// constraints aren't met.
type ProductGetModelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductGetModelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductGetModelRespMultiError) AllErrors() []error { return m }

// ProductGetModelRespValidationError is the validation error returned by
// ProductGetModelResp.Validate if the designated constraints aren't met.
type ProductGetModelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductGetModelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductGetModelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductGetModelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductGetModelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductGetModelRespValidationError) ErrorName() string {
	return "ProductGetModelRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductGetModelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductGetModelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductGetModelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductGetModelRespValidationError{}

// Validate checks the field values on ProductUpdateModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateModelReqMultiError, or nil if none found.
func (m *ProductUpdateModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ThingDef

	if len(errors) > 0 {
		return ProductUpdateModelReqMultiError(errors)
	}

	return nil
}

// ProductUpdateModelReqMultiError is an error wrapping multiple validation
// errors returned by ProductUpdateModelReq.ValidateAll() if the designated
// constraints aren't met.
type ProductUpdateModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateModelReqMultiError) AllErrors() []error { return m }

// ProductUpdateModelReqValidationError is the validation error returned by
// ProductUpdateModelReq.Validate if the designated constraints aren't met.
type ProductUpdateModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateModelReqValidationError) ErrorName() string {
	return "ProductUpdateModelReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductUpdateModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateModelReqValidationError{}

// Validate checks the field values on ProductUpdateModelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductUpdateModelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductUpdateModelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductUpdateModelRespMultiError, or nil if none found.
func (m *ProductUpdateModelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductUpdateModelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	// no validation rules for ThingDef

	if len(errors) > 0 {
		return ProductUpdateModelRespMultiError(errors)
	}

	return nil
}

// ProductUpdateModelRespMultiError is an error wrapping multiple validation
// errors returned by ProductUpdateModelResp.ValidateAll() if the designated
// constraints aren't met.
type ProductUpdateModelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductUpdateModelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductUpdateModelRespMultiError) AllErrors() []error { return m }

// ProductUpdateModelRespValidationError is the validation error returned by
// ProductUpdateModelResp.Validate if the designated constraints aren't met.
type ProductUpdateModelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductUpdateModelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductUpdateModelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductUpdateModelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductUpdateModelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductUpdateModelRespValidationError) ErrorName() string {
	return "ProductUpdateModelRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductUpdateModelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductUpdateModelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductUpdateModelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductUpdateModelRespValidationError{}

// Validate checks the field values on ProductModel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductModelMultiError, or
// nil if none found.
func (m *ProductModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductModelValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ProductModelValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := ProductModelValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModelDef()) < 1 {
		err := ProductModelValidationError{
			field:  "ModelDef",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for ProductId

	// no validation rules for CreateTime

	// no validation rules for IsSys

	if len(errors) > 0 {
		return ProductModelMultiError(errors)
	}

	return nil
}

// ProductModelMultiError is an error wrapping multiple validation errors
// returned by ProductModel.ValidateAll() if the designated constraints aren't met.
type ProductModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelMultiError) AllErrors() []error { return m }

// ProductModelValidationError is the validation error returned by
// ProductModel.Validate if the designated constraints aren't met.
type ProductModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelValidationError) ErrorName() string { return "ProductModelValidationError" }

// Error satisfies the builtin error interface
func (e ProductModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelValidationError{}

// Validate checks the field values on ProductModelAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelAddReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelAddReqMultiError, or nil if none found.
func (m *ProductModelAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductModelAddReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ProductModelAddReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := ProductModelAddReqValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModelDef()) < 1 {
		err := ProductModelAddReqValidationError{
			field:  "ModelDef",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductId

	// no validation rules for Desc

	if len(errors) > 0 {
		return ProductModelAddReqMultiError(errors)
	}

	return nil
}

// ProductModelAddReqMultiError is an error wrapping multiple validation errors
// returned by ProductModelAddReq.ValidateAll() if the designated constraints
// aren't met.
type ProductModelAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelAddReqMultiError) AllErrors() []error { return m }

// ProductModelAddReqValidationError is the validation error returned by
// ProductModelAddReq.Validate if the designated constraints aren't met.
type ProductModelAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelAddReqValidationError) ErrorName() string {
	return "ProductModelAddReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelAddReqValidationError{}

// Validate checks the field values on ProductModelAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelAddResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelAddResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelAddRespMultiError, or nil if none found.
func (m *ProductModelAddResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelAddResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductModelAddRespMultiError(errors)
	}

	return nil
}

// ProductModelAddRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelAddResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelAddRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelAddRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelAddRespMultiError) AllErrors() []error { return m }

// ProductModelAddRespValidationError is the validation error returned by
// ProductModelAddResp.Validate if the designated constraints aren't met.
type ProductModelAddRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelAddRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelAddRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelAddRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelAddRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelAddRespValidationError) ErrorName() string {
	return "ProductModelAddRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelAddRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelAddResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelAddRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelAddRespValidationError{}

// Validate checks the field values on ProductModelDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelDelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelDelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelDelReqMultiError, or nil if none found.
func (m *ProductModelDelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelDelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ProductModelDelReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductModelDelReqMultiError(errors)
	}

	return nil
}

// ProductModelDelReqMultiError is an error wrapping multiple validation errors
// returned by ProductModelDelReq.ValidateAll() if the designated constraints
// aren't met.
type ProductModelDelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelDelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelDelReqMultiError) AllErrors() []error { return m }

// ProductModelDelReqValidationError is the validation error returned by
// ProductModelDelReq.Validate if the designated constraints aren't met.
type ProductModelDelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelDelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelDelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelDelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelDelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelDelReqValidationError) ErrorName() string {
	return "ProductModelDelReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelDelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelDelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelDelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelDelReqValidationError{}

// Validate checks the field values on ProductModelDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelDelResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelDelResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelDelRespMultiError, or nil if none found.
func (m *ProductModelDelResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelDelResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductModelDelRespMultiError(errors)
	}

	return nil
}

// ProductModelDelRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelDelResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelDelRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelDelRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelDelRespMultiError) AllErrors() []error { return m }

// ProductModelDelRespValidationError is the validation error returned by
// ProductModelDelResp.Validate if the designated constraints aren't met.
type ProductModelDelRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelDelRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelDelRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelDelRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelDelRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelDelRespValidationError) ErrorName() string {
	return "ProductModelDelRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelDelRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelDelResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelDelRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelDelRespValidationError{}

// Validate checks the field values on ProductModelUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelUpdateReqMultiError, or nil if none found.
func (m *ProductModelUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProductModelUpdateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := ProductModelUpdateReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := ProductModelUpdateReqValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModelDef()) < 1 {
		err := ProductModelUpdateReqValidationError{
			field:  "ModelDef",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return ProductModelUpdateReqMultiError(errors)
	}

	return nil
}

// ProductModelUpdateReqMultiError is an error wrapping multiple validation
// errors returned by ProductModelUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type ProductModelUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelUpdateReqMultiError) AllErrors() []error { return m }

// ProductModelUpdateReqValidationError is the validation error returned by
// ProductModelUpdateReq.Validate if the designated constraints aren't met.
type ProductModelUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelUpdateReqValidationError) ErrorName() string {
	return "ProductModelUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelUpdateReqValidationError{}

// Validate checks the field values on ProductModelUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelUpdateResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelUpdateRespMultiError, or nil if none found.
func (m *ProductModelUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Id

	if len(errors) > 0 {
		return ProductModelUpdateRespMultiError(errors)
	}

	return nil
}

// ProductModelUpdateRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelUpdateResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelUpdateRespMultiError) AllErrors() []error { return m }

// ProductModelUpdateRespValidationError is the validation error returned by
// ProductModelUpdateResp.Validate if the designated constraints aren't met.
type ProductModelUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelUpdateRespValidationError) ErrorName() string {
	return "ProductModelUpdateRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelUpdateRespValidationError{}

// Validate checks the field values on ProductModelGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelGetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelGetReqMultiError, or nil if none found.
func (m *ProductModelGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ProductModelGetReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductModelGetReqMultiError(errors)
	}

	return nil
}

// ProductModelGetReqMultiError is an error wrapping multiple validation errors
// returned by ProductModelGetReq.ValidateAll() if the designated constraints
// aren't met.
type ProductModelGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelGetReqMultiError) AllErrors() []error { return m }

// ProductModelGetReqValidationError is the validation error returned by
// ProductModelGetReq.Validate if the designated constraints aren't met.
type ProductModelGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelGetReqValidationError) ErrorName() string {
	return "ProductModelGetReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelGetReqValidationError{}

// Validate checks the field values on ProductModelGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelGetResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelGetRespMultiError, or nil if none found.
func (m *ProductModelGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductModelGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductModelGetRespValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductModelGetRespValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductModelGetRespMultiError(errors)
	}

	return nil
}

// ProductModelGetRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelGetResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelGetRespMultiError) AllErrors() []error { return m }

// ProductModelGetRespValidationError is the validation error returned by
// ProductModelGetResp.Validate if the designated constraints aren't met.
type ProductModelGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelGetRespValidationError) ErrorName() string {
	return "ProductModelGetRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelGetRespValidationError{}

// Validate checks the field values on ProductModelListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelListReqMultiError, or nil if none found.
func (m *ProductModelListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Type

	// no validation rules for ProductId

	if len(errors) > 0 {
		return ProductModelListReqMultiError(errors)
	}

	return nil
}

// ProductModelListReqMultiError is an error wrapping multiple validation
// errors returned by ProductModelListReq.ValidateAll() if the designated
// constraints aren't met.
type ProductModelListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelListReqMultiError) AllErrors() []error { return m }

// ProductModelListReqValidationError is the validation error returned by
// ProductModelListReq.Validate if the designated constraints aren't met.
type ProductModelListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelListReqValidationError) ErrorName() string {
	return "ProductModelListReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelListReqValidationError{}

// Validate checks the field values on ProductModelListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelListRespMultiError, or nil if none found.
func (m *ProductModelListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductModelListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductModelListRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductModelListRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductModelListRespMultiError(errors)
	}

	return nil
}

// ProductModelListRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelListResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelListRespMultiError) AllErrors() []error { return m }

// ProductModelListRespValidationError is the validation error returned by
// ProductModelListResp.Validate if the designated constraints aren't met.
type ProductModelListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelListRespValidationError) ErrorName() string {
	return "ProductModelListRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelListRespValidationError{}

// Validate checks the field values on ProductModelPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelPageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelPageReqMultiError, or nil if none found.
func (m *ProductModelPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageIndex

	if m.GetPageSize() < 1 {
		err := ProductModelPageReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Type

	// no validation rules for ProductId

	if len(errors) > 0 {
		return ProductModelPageReqMultiError(errors)
	}

	return nil
}

// ProductModelPageReqMultiError is an error wrapping multiple validation
// errors returned by ProductModelPageReq.ValidateAll() if the designated
// constraints aren't met.
type ProductModelPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelPageReqMultiError) AllErrors() []error { return m }

// ProductModelPageReqValidationError is the validation error returned by
// ProductModelPageReq.Validate if the designated constraints aren't met.
type ProductModelPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelPageReqValidationError) ErrorName() string {
	return "ProductModelPageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelPageReqValidationError{}

// Validate checks the field values on ProductModelPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductModelPageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductModelPageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductModelPageRespMultiError, or nil if none found.
func (m *ProductModelPageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductModelPageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductModelPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductModelPageRespValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductModelPageRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductModelPageRespMultiError(errors)
	}

	return nil
}

// ProductModelPageRespMultiError is an error wrapping multiple validation
// errors returned by ProductModelPageResp.ValidateAll() if the designated
// constraints aren't met.
type ProductModelPageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductModelPageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductModelPageRespMultiError) AllErrors() []error { return m }

// ProductModelPageRespValidationError is the validation error returned by
// ProductModelPageResp.Validate if the designated constraints aren't met.
type ProductModelPageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductModelPageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductModelPageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductModelPageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductModelPageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductModelPageRespValidationError) ErrorName() string {
	return "ProductModelPageRespValidationError"
}

// Error satisfies the builtin error interface
func (e ProductModelPageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductModelPageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductModelPageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductModelPageRespValidationError{}
