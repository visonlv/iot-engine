// Code generated by protoc-gen-vkit. DO NOT EDIT.
// versions:
// - protoc-gen-vkit v1.0.0
// - protoc             v3.21.1
// source: thing.proto

package proto

import (
	context "context"
	grpcx "github.com/visonlv/go-vkit/grpcx"
	grpc "google.golang.org/grpc"
)

var _ = new(context.Context)
var _ = new(grpc.CallOption)
var _ = new(grpcx.Client)

type DeviceServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *DeviceServiceClient) Add(ctx context.Context, in *DeviceAddReq, opts ...grpc.CallOption) (*DeviceAddResp, error) {
	out := new(DeviceAddResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Del(ctx context.Context, in *DeviceDelReq, opts ...grpc.CallOption) (*DeviceDelResp, error) {
	out := new(DeviceDelResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Update(ctx context.Context, in *DeviceUpdateReq, opts ...grpc.CallOption) (*DeviceUpdateResp, error) {
	out := new(DeviceUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Get(ctx context.Context, in *DeviceGetReq, opts ...grpc.CallOption) (*DeviceGetResp, error) {
	out := new(DeviceGetResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) List(ctx context.Context, in *DeviceListReq, opts ...grpc.CallOption) (*DeviceListResp, error) {
	out := new(DeviceListResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) ListGateway(ctx context.Context, in *DeviceListGatewayReq, opts ...grpc.CallOption) (*DeviceListGatewayResp, error) {
	out := new(DeviceListGatewayResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.ListGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Page(ctx context.Context, in *DevicePageReq, opts ...grpc.CallOption) (*DevicePageResp, error) {
	out := new(DevicePageResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Auth(ctx context.Context, in *DeviceAuthReq, opts ...grpc.CallOption) (*DeviceAuthResp, error) {
	out := new(DeviceAuthResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DeviceServiceClient) Properties(ctx context.Context, in *DevicePropertiesReq, opts ...grpc.CallOption) (*DevicePropertiesResp, error) {
	out := new(DevicePropertiesResp)
	err := c.cc.Invoke(ctx, c.name, "DeviceService.Properties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewDeviceServiceClient(name string, cc grpcx.Client) *DeviceServiceClient {
	return &DeviceServiceClient{name, cc}
}

type ProductServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *ProductServiceClient) Add(ctx context.Context, in *ProductAddReq, opts ...grpc.CallOption) (*ProductAddResp, error) {
	out := new(ProductAddResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) Del(ctx context.Context, in *ProductDelReq, opts ...grpc.CallOption) (*ProductDelResp, error) {
	out := new(ProductDelResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) Update(ctx context.Context, in *ProductUpdateReq, opts ...grpc.CallOption) (*ProductUpdateResp, error) {
	out := new(ProductUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) Get(ctx context.Context, in *ProductGetReq, opts ...grpc.CallOption) (*ProductGetResp, error) {
	out := new(ProductGetResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) List(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	out := new(ProductListResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) Page(ctx context.Context, in *ProductPageReq, opts ...grpc.CallOption) (*ProductPageResp, error) {
	out := new(ProductPageResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) GetModel(ctx context.Context, in *ProductGetModelReq, opts ...grpc.CallOption) (*ProductGetModelResp, error) {
	out := new(ProductGetModelResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductServiceClient) UpdateModel(ctx context.Context, in *ProductUpdateModelReq, opts ...grpc.CallOption) (*ProductUpdateModelResp, error) {
	out := new(ProductUpdateModelResp)
	err := c.cc.Invoke(ctx, c.name, "ProductService.UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewProductServiceClient(name string, cc grpcx.Client) *ProductServiceClient {
	return &ProductServiceClient{name, cc}
}

type ProductModelServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *ProductModelServiceClient) Add(ctx context.Context, in *ProductModelAddReq, opts ...grpc.CallOption) (*ProductModelAddResp, error) {
	out := new(ProductModelAddResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductModelServiceClient) Del(ctx context.Context, in *ProductModelDelReq, opts ...grpc.CallOption) (*ProductModelDelResp, error) {
	out := new(ProductModelDelResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductModelServiceClient) Update(ctx context.Context, in *ProductModelUpdateReq, opts ...grpc.CallOption) (*ProductModelUpdateResp, error) {
	out := new(ProductModelUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductModelServiceClient) Get(ctx context.Context, in *ProductModelGetReq, opts ...grpc.CallOption) (*ProductModelGetResp, error) {
	out := new(ProductModelGetResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductModelServiceClient) List(ctx context.Context, in *ProductModelListReq, opts ...grpc.CallOption) (*ProductModelListResp, error) {
	out := new(ProductModelListResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ProductModelServiceClient) Page(ctx context.Context, in *ProductModelPageReq, opts ...grpc.CallOption) (*ProductModelPageResp, error) {
	out := new(ProductModelPageResp)
	err := c.cc.Invoke(ctx, c.name, "ProductModelService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewProductModelServiceClient(name string, cc grpcx.Client) *ProductModelServiceClient {
	return &ProductModelServiceClient{name, cc}
}

type RuleServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *RuleServiceClient) Add(ctx context.Context, in *RuleAddReq, opts ...grpc.CallOption) (*RuleAddResp, error) {
	out := new(RuleAddResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *RuleServiceClient) Del(ctx context.Context, in *RuleDelReq, opts ...grpc.CallOption) (*RuleDelResp, error) {
	out := new(RuleDelResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *RuleServiceClient) Update(ctx context.Context, in *RuleUpdateReq, opts ...grpc.CallOption) (*RuleUpdateResp, error) {
	out := new(RuleUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *RuleServiceClient) Get(ctx context.Context, in *RuleGetReq, opts ...grpc.CallOption) (*RuleGetResp, error) {
	out := new(RuleGetResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *RuleServiceClient) List(ctx context.Context, in *RuleListReq, opts ...grpc.CallOption) (*RuleListResp, error) {
	out := new(RuleListResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *RuleServiceClient) Page(ctx context.Context, in *RulePageReq, opts ...grpc.CallOption) (*RulePageResp, error) {
	out := new(RulePageResp)
	err := c.cc.Invoke(ctx, c.name, "RuleService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewRuleServiceClient(name string, cc grpcx.Client) *RuleServiceClient {
	return &RuleServiceClient{name, cc}
}

type NotifyConfigServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *NotifyConfigServiceClient) Add(ctx context.Context, in *NotifyConfigAddReq, opts ...grpc.CallOption) (*NotifyConfigAddResp, error) {
	out := new(NotifyConfigAddResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Del(ctx context.Context, in *NotifyConfigDelReq, opts ...grpc.CallOption) (*NotifyConfigDelResp, error) {
	out := new(NotifyConfigDelResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Update(ctx context.Context, in *NotifyConfigUpdateReq, opts ...grpc.CallOption) (*NotifyConfigUpdateResp, error) {
	out := new(NotifyConfigUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Get(ctx context.Context, in *NotifyConfigGetReq, opts ...grpc.CallOption) (*NotifyConfigGetResp, error) {
	out := new(NotifyConfigGetResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) List(ctx context.Context, in *NotifyConfigListReq, opts ...grpc.CallOption) (*NotifyConfigListResp, error) {
	out := new(NotifyConfigListResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyConfigServiceClient) Page(ctx context.Context, in *NotifyConfigPageReq, opts ...grpc.CallOption) (*NotifyConfigPageResp, error) {
	out := new(NotifyConfigPageResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyConfigService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewNotifyConfigServiceClient(name string, cc grpcx.Client) *NotifyConfigServiceClient {
	return &NotifyConfigServiceClient{name, cc}
}

type NotifyTemplateServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *NotifyTemplateServiceClient) Add(ctx context.Context, in *NotifyTemplateAddReq, opts ...grpc.CallOption) (*NotifyTemplateAddResp, error) {
	out := new(NotifyTemplateAddResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyTemplateServiceClient) Del(ctx context.Context, in *NotifyTemplateDelReq, opts ...grpc.CallOption) (*NotifyTemplateDelResp, error) {
	out := new(NotifyTemplateDelResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyTemplateServiceClient) Update(ctx context.Context, in *NotifyTemplateUpdateReq, opts ...grpc.CallOption) (*NotifyTemplateUpdateResp, error) {
	out := new(NotifyTemplateUpdateResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyTemplateServiceClient) Get(ctx context.Context, in *NotifyTemplateGetReq, opts ...grpc.CallOption) (*NotifyTemplateGetResp, error) {
	out := new(NotifyTemplateGetResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyTemplateServiceClient) List(ctx context.Context, in *NotifyTemplateListReq, opts ...grpc.CallOption) (*NotifyTemplateListResp, error) {
	out := new(NotifyTemplateListResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyTemplateServiceClient) Page(ctx context.Context, in *NotifyTemplatePageReq, opts ...grpc.CallOption) (*NotifyTemplatePageResp, error) {
	out := new(NotifyTemplatePageResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyTemplateService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewNotifyTemplateServiceClient(name string, cc grpcx.Client) *NotifyTemplateServiceClient {
	return &NotifyTemplateServiceClient{name, cc}
}

type NotifyLogServiceClient struct {
	name string
	cc   grpcx.Client
}

func (c *NotifyLogServiceClient) Del(ctx context.Context, in *NotifyLogDelReq, opts ...grpc.CallOption) (*NotifyLogDelResp, error) {
	out := new(NotifyLogDelResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyLogService.Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *NotifyLogServiceClient) Page(ctx context.Context, in *NotifyLogPageReq, opts ...grpc.CallOption) (*NotifyLogPageResp, error) {
	out := new(NotifyLogPageResp)
	err := c.cc.Invoke(ctx, c.name, "NotifyLogService.Page", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func NewNotifyLogServiceClient(name string, cc grpcx.Client) *NotifyLogServiceClient {
	return &NotifyLogServiceClient{name, cc}
}
