// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/common/define"
	"github.com/visonlv/iot-engine/thing/model"
	pb "github.com/visonlv/iot-engine/thing/proto"
	"gorm.io/gorm"
)

type NotifyConfigService struct {
}

func (the *NotifyConfigService) Add(ctx context.Context, req *pb.NotifyConfigAddReq, resp *pb.NotifyConfigAddResp) error {
	_, err := model.NotifyConfigByName(nil, req.Name)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取信息错误:%s", err.Error())
		return nil
	}
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "配置名称已经存在"
		return nil
	}

	_, err = define.IsNotifyConfigDefValid(req.NotifyType, req.NotifyConfig)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	m := &model.NotifyConfigModel{
		Id:           utilsx.GenUuid(),
		Name:         req.Name,
		NotifyType:   req.NotifyType,
		NotifyConfig: req.NotifyConfig,
		Desc:         req.Desc,
	}
	err = model.NotifyConfigAdd(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加通知配置失败"
		return nil
	}

	resp.Id = m.Id
	return nil
}

func (the *NotifyConfigService) Del(ctx context.Context, req *pb.NotifyConfigDelReq, resp *pb.NotifyConfigDelResp) error {
	m, err := model.NotifyConfigGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置失败:%s", err.Error())
		return nil
	}

	count, err := model.NotifyTemplateCountByConfigId(nil, m.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取是否有绑定关系失败:%s", err.Error())
		return nil
	}
	if count > 0 {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "存在通知模板跟改配置的绑定关系"
		return nil
	}

	err = model.NotifyConfigDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除通知配置失败:%s", err.Error())
		return nil
	}
	resp.Id = req.Id
	return nil
}

func (the *NotifyConfigService) Update(ctx context.Context, req *pb.NotifyConfigUpdateReq, resp *pb.NotifyConfigUpdateResp) error {
	m, err := model.NotifyConfigGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置失败:%s", err.Error())
		return nil
	}

	item, err := model.NotifyConfigByName(nil, req.Name)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置失败:%s", err.Error())
		return nil
	}
	if err == nil && item.Id != req.Id {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "通知配置名称已经存在"
		return nil
	}

	_, err = define.IsNotifyConfigDefValid(m.NotifyType, req.NotifyConfig)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	m.Name = req.Name
	m.NotifyConfig = req.NotifyConfig
	m.Desc = req.Desc
	err = model.NotifyConfigUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("修改通知配置失败:%s", err.Error())
		return nil
	}

	resp.Id = m.Id
	return nil
}

func (the *NotifyConfigService) Get(ctx context.Context, req *pb.NotifyConfigGetReq, resp *pb.NotifyConfigGetResp) error {
	m, err := model.NotifyConfigGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置失败:%s", err.Error())
		return nil
	}
	itemRet := &pb.NotifyConfig{}
	utilsx.DeepCopy(m, itemRet)
	itemRet.CreateTime = m.CreatedAt.UnixMilli()
	resp.Item = itemRet
	return nil
}

func (the *NotifyConfigService) List(ctx context.Context, req *pb.NotifyConfigListReq, resp *pb.NotifyConfigListResp) error {
	list, err := model.NotifyConfigList(nil, req.Name, req.NotifyType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取列表失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.NotifyConfig, 0)
	for _, m := range list {
		itemRet := &pb.NotifyConfig{}
		if req.OnlyIdAndName {
			itemRet.Id = m.Id
			itemRet.Name = m.Name
			itemRet.NotifyType = m.NotifyType
		} else {
			utilsx.DeepCopy(m, itemRet)
			itemRet.CreateTime = m.CreatedAt.UnixMilli()
		}
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	return nil
}

func (the *NotifyConfigService) Page(ctx context.Context, req *pb.NotifyConfigPageReq, resp *pb.NotifyConfigPageResp) error {
	list, total, err := model.NotifyConfigPage(nil, req.PageIndex, req.PageSize, req.Name, req.NotifyType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.NotifyConfig, 0)
	for _, m := range list {
		itemRet := &pb.NotifyConfig{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		listRet = append(listRet, itemRet)
	}

	resp.Items = listRet
	resp.Total = total
	return nil
}
