// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/common/define"
	"github.com/visonlv/iot-engine/thing/model"
	pb "github.com/visonlv/iot-engine/thing/proto"
	"gorm.io/gorm"
)

type NotifyTemplateService struct {
}

func (the *NotifyTemplateService) Add(ctx context.Context, req *pb.NotifyTemplateAddReq, resp *pb.NotifyTemplateAddResp) error {
	_, err := model.NotifyTemplateByName(nil, req.Name)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取信息错误:%s", err.Error())
		return nil
	}
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "模板名称已经存在"
		return nil
	}

	config, err := model.NotifyConfigGet(nil, req.NotifyConfigId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置记录失败 :%s", err.Error())
		return nil
	}

	if config.NotifyType != req.NotifyType {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "选择的通知配置跟通知类型不一致"
		return nil
	}

	_, err = define.IsNotifyTemplateDefValid(config.NotifyType, req.NotifyTemplate)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	m := &model.NotifyTemplateModel{
		Id:             utilsx.GenUuid(),
		Name:           req.Name,
		NotifyType:     config.NotifyType,
		NotifyConfigId: req.NotifyConfigId,
		NotifyTemplate: req.NotifyTemplate,
		Desc:           req.Desc,
	}
	err = model.NotifyTemplateAdd(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加通知模板失败"
		return nil
	}

	resp.Id = m.Id
	return nil
}

func (the *NotifyTemplateService) Del(ctx context.Context, req *pb.NotifyTemplateDelReq, resp *pb.NotifyTemplateDelResp) error {
	_, err := model.NotifyTemplateGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知模板失败:%s", err.Error())
		return nil
	}

	err = model.NotifyTemplateDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除通知模板失败:%s", err.Error())
		return nil
	}
	resp.Id = req.Id
	return nil
}

func (the *NotifyTemplateService) Update(ctx context.Context, req *pb.NotifyTemplateUpdateReq, resp *pb.NotifyTemplateUpdateResp) error {
	m, err := model.NotifyTemplateGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知模板失败:%s", err.Error())
		return nil
	}

	item, err := model.NotifyTemplateByName(nil, req.Name)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知模板失败:%s", err.Error())
		return nil
	}
	if err == nil && item.Id != req.Id {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "通知模板名称已经存在"
		return nil
	}

	config, err := model.NotifyConfigGet(nil, req.NotifyConfigId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置记录失败 :%s", err.Error())
		return nil
	}

	_, err = define.IsNotifyTemplateDefValid(config.NotifyType, req.NotifyTemplate)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	if config.NotifyType != item.NotifyType {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "通知类型不一致"
		return nil
	}

	m.Name = req.Name
	m.NotifyTemplate = req.NotifyTemplate
	m.Desc = req.Desc
	err = model.NotifyTemplateUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("修改通知模板失败:%s", err.Error())
		return nil
	}

	resp.Id = m.Id
	return nil
}

func (the *NotifyTemplateService) Get(ctx context.Context, req *pb.NotifyTemplateGetReq, resp *pb.NotifyTemplateGetResp) error {
	m, err := model.NotifyTemplateGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知模板失败:%s", err.Error())
		return nil
	}

	m1, err := model.NotifyConfigGet(nil, m.NotifyConfigId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取通知配置失败:%s", err.Error())
		return nil
	}
	itemRet1 := &pb.NotifyConfig{}
	utilsx.DeepCopy(m1, itemRet1)

	itemRet := &pb.NotifyTemplate{}
	utilsx.DeepCopy(m, itemRet)
	itemRet.CreateTime = m.CreatedAt.UnixMilli()
	itemRet.NotifyConfig = itemRet1

	resp.Item = itemRet
	return nil
}

func (the *NotifyTemplateService) List(ctx context.Context, req *pb.NotifyTemplateListReq, resp *pb.NotifyTemplateListResp) error {
	list, err := model.NotifyTemplateList(nil, req.Name, req.NotifyType, req.NotifyConfigId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取列表失败:%s", err.Error())
		return nil
	}

	configInfoMap := make(map[string]*pb.NotifyConfig)
	if !req.OnlyIdAndName {
		configIdMap := make(map[string]bool)
		for _, m := range list {
			configIdMap[m.NotifyConfigId] = true
		}
		configIds := make([]string, 0)
		for v := range configIdMap {
			configIds = append(configIds, v)
		}

		if len(configIds) > 0 {
			list, err := model.NotifyConfigListInIds(nil, configIds)
			if err != nil {
				resp.Code = errorsx.FAIL.Code
				resp.Msg = fmt.Sprintf("获取通知配置列表失败:%s", err.Error())
				return nil
			}

			for _, v := range list {
				itemRet := &pb.NotifyConfig{}
				utilsx.DeepCopy(v, itemRet)
				itemRet.CreateTime = v.CreatedAt.UnixMilli()
				configInfoMap[v.Id] = itemRet
			}
		}
	}

	listRet := make([]*pb.NotifyTemplate, 0)
	for _, m := range list {
		itemRet := &pb.NotifyTemplate{}
		if req.OnlyIdAndName {
			itemRet.Id = m.Id
			itemRet.Name = m.Name
		} else {
			utilsx.DeepCopy(m, itemRet)
			itemRet.CreateTime = m.CreatedAt.UnixMilli()
			if info, ok := configInfoMap[m.NotifyConfigId]; ok {
				itemRet.NotifyConfig = info
			}
		}
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	return nil
}

func (the *NotifyTemplateService) Page(ctx context.Context, req *pb.NotifyTemplatePageReq, resp *pb.NotifyTemplatePageResp) error {
	list, total, err := model.NotifyTemplatePage(nil, req.PageIndex, req.PageSize, req.Name, req.NotifyType, req.NotifyConfigId)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页失败:%s", err.Error())
		return nil
	}

	configInfoMap := make(map[string]*pb.NotifyConfig)
	configIdMap := make(map[string]bool)
	for _, m := range list {
		configIdMap[m.NotifyConfigId] = true
	}
	configIds := make([]string, 0)
	for v := range configIdMap {
		configIds = append(configIds, v)
	}

	if len(configIds) > 0 {
		list, err := model.NotifyConfigListInIds(nil, configIds)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = fmt.Sprintf("获取通知配置列表失败:%s", err.Error())
			return nil
		}

		for _, v := range list {
			itemRet := &pb.NotifyConfig{}
			utilsx.DeepCopy(v, itemRet)
			itemRet.CreateTime = v.CreatedAt.UnixMilli()
			configInfoMap[v.Id] = itemRet
		}
	}

	listRet := make([]*pb.NotifyTemplate, 0)
	for _, m := range list {
		itemRet := &pb.NotifyTemplate{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		if info, ok := configInfoMap[m.NotifyConfigId]; ok {
			itemRet.NotifyConfig = info
		}
		listRet = append(listRet, itemRet)
	}

	resp.Items = listRet
	resp.Total = total
	return nil
}
