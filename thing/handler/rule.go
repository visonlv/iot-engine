// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"encoding/json"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/logger"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/common/define"
	"github.com/visonlv/iot-engine/thing/app"
	"github.com/visonlv/iot-engine/thing/handler/rule"
	"github.com/visonlv/iot-engine/thing/model"
	pb "github.com/visonlv/iot-engine/thing/proto"
	"google.golang.org/protobuf/proto"
	"gorm.io/gorm"
)

type RuleService struct {
}

func (the *RuleService) Add(ctx context.Context, req *pb.RuleAddReq, resp *pb.RuleAddResp) error {
	_, err := model.RuleByName(nil, req.Name)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取信息错误:%s", err.Error())
		return nil
	}
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "规则名称已经存在"
		return nil
	}

	trigger, action, err := rule.ParseTriggerAndAction(req.TriggerType, req.Trigger, req.Action)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("触发器跟动作校验失败 %s", err.Error())
		return nil
	}

	triggerbb, _ := json.Marshal(trigger)
	actionbb, _ := json.Marshal(action)
	m := &model.RuleModel{
		Id:          utilsx.GenUuid(),
		Name:        req.Name,
		TriggerType: req.TriggerType,
		Trigger:     string(triggerbb),
		Action:      string(actionbb),
		Desc:        req.Desc,
	}
	err = model.RuleAdd(nil, m)
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "添加规则失败"
		return nil
	}

	pbRule := &pb.Rule{}
	utilsx.DeepCopy(m, pbRule)
	cc, _ := proto.Marshal(pbRule)
	err = app.Nats.Publish(define.SysTopicRuleAdd, cc)
	if err != nil {
		logger.Errorf("规则添加 name:%s 发送nats失败 %s", pbRule.Name, err.Error())
	} else {
		logger.Infof("规则添加 name:%s 发送nats成功", pbRule.Name)
	}

	resp.Id = m.Id
	return nil
}

func (the *RuleService) Del(ctx context.Context, req *pb.RuleDelReq, resp *pb.RuleDelResp) error {
	m, err := model.RuleGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取规则失败:%s", err.Error())
		return nil
	}

	err = model.RuleDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除设备失败:%s", err.Error())
		return nil
	}

	pbRule := &pb.Rule{}
	utilsx.DeepCopy(m, pbRule)
	cc, _ := proto.Marshal(pbRule)
	err = app.Nats.Publish(define.SysTopicRuleDel, cc)
	if err != nil {
		logger.Errorf("规则删除 sn:%s 发送nats失败 %s", pbRule.Name, err.Error())
	} else {
		logger.Infof("规则删除 sn:%s 发送nats成功", pbRule.Name)
	}

	resp.Id = req.Id
	return nil
}

func (the *RuleService) Update(ctx context.Context, req *pb.RuleUpdateReq, resp *pb.RuleUpdateResp) error {
	m, err := model.RuleGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取规则失败:%s", err.Error())
		return nil
	}

	trigger, action, err := rule.ParseTriggerAndAction(req.TriggerType, req.Trigger, req.Action)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("触发器跟动作校验失败 %s", err.Error())
		return nil
	}

	triggerbb, _ := json.Marshal(trigger)
	actionbb, _ := json.Marshal(action)

	m.Name = req.Name
	m.TriggerType = req.TriggerType
	m.Trigger = string(triggerbb)
	m.Action = string(actionbb)
	m.Desc = req.Desc
	err = model.RuleUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("修改规则失败:%s", err.Error())
		return nil
	}

	pbRule := &pb.Rule{}
	utilsx.DeepCopy(m, pbRule)
	cc, _ := proto.Marshal(pbRule)
	err = app.Nats.Publish(define.SysTopicRuleUpdate, cc)
	if err != nil {
		logger.Errorf("规则更新 sn:%s 发送nats失败 %s", pbRule.Name, err.Error())
	} else {
		logger.Infof("规则更新 sn:%s 发送nats成功", pbRule.Name)
	}

	resp.Id = m.Id
	return nil
}

func (the *RuleService) Get(ctx context.Context, req *pb.RuleGetReq, resp *pb.RuleGetResp) error {
	m, err := model.RuleGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取设备失败:%s", err.Error())
		return nil
	}
	itemRet := &pb.Rule{}
	utilsx.DeepCopy(m, itemRet)
	itemRet.CreateTime = m.CreatedAt.UnixMilli()
	resp.Item = itemRet
	return nil
}

func (the *RuleService) List(ctx context.Context, req *pb.RuleListReq, resp *pb.RuleListResp) error {
	list, err := model.RuleList(nil, req.Name, req.TriggerType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取列表失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Rule, 0)
	for _, m := range list {
		itemRet := &pb.Rule{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	return nil
}

func (the *RuleService) Page(ctx context.Context, req *pb.RulePageReq, resp *pb.RulePageResp) error {
	list, total, err := model.RulePage(nil, req.PageIndex, req.PageSize, req.Name, req.TriggerType)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Rule, 0)
	for _, m := range list {
		itemRet := &pb.Rule{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		listRet = append(listRet, itemRet)
	}

	resp.Items = listRet
	resp.Total = total
	return nil
}
