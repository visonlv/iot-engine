// Code generated by protoc-gen-vkit.
// versions:
// - protoc-gen-vkit v1.0.0

package handler

import (
	context "context"
	"encoding/json"
	"fmt"

	"github.com/visonlv/go-vkit/errorsx"
	"github.com/visonlv/go-vkit/logger"
	"github.com/visonlv/go-vkit/utilsx"
	"github.com/visonlv/iot-engine/common/define"
	"github.com/visonlv/iot-engine/common/utils"
	"github.com/visonlv/iot-engine/thing/app"
	"github.com/visonlv/iot-engine/thing/handler/product"
	"github.com/visonlv/iot-engine/thing/model"
	pb "github.com/visonlv/iot-engine/thing/proto"
	"google.golang.org/protobuf/proto"
	"gorm.io/gorm"
)

type ProductService struct {
}

func (the *ProductService) Add(ctx context.Context, req *pb.ProductAddReq, resp *pb.ProductAddResp) error {
	_, err := model.ProductGetByModel(nil, req.Model)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品信息错误:%s", err.Error())
		return nil
	}
	if err == nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "产品型号已经存在"
		return nil
	}

	pk := ""
	for {
		pk = utils.GenShortId()
		has, err := model.ProductExistByPk(nil, pk)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = fmt.Sprintf("获取信息错误:%s", err.Error())
			return nil
		}
		if !has {
			break
		}
	}

	m := &model.ProductModel{
		Name:      req.Name,
		Model:     req.Model,
		Pk:        pk,
		Transform: req.Transform,
		Protocol:  req.Protocol,
		Type:      req.Type,
		Desc:      req.Desc,
	}
	err = model.ProductAdd(nil, m)

	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("添加产品失败:%s", err.Error())
		return nil
	}

	// 初始化系统物模型
	if req.Transform == string(define.TransformModel) {
		err := product.InitProductModel(m.Id)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = fmt.Sprintf("初始化物模型失败:%s", err.Error())
			return nil
		}
	}
	err = product.SyncOneProduct(m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("同步物模型失败:%s", err.Error())
		return nil
	}
	resp.Id = m.Id
	return nil
}

func (the *ProductService) Del(ctx context.Context, req *pb.ProductDelReq, resp *pb.ProductDelResp) error {
	m, err := model.ProductGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
		return nil
	}

	count, err := model.DeviceCountByPk(nil, m.Pk)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取关联设备数:%s", err.Error())
		return nil
	}

	if count > 0 {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "存在关联设备，不可删除"
		return nil
	}
	m.IsDelete = 1
	err = model.ProductDel(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除产品失败:%s", err.Error())
		return nil
	}

	err = model.ProductModelDelByProductId(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("删除关联的物模型项失败:%s", err.Error())
		return nil
	}

	pbProduct := &pb.Product{}
	utilsx.DeepCopy(m, pbProduct)
	cc, _ := proto.Marshal(pbProduct)
	err = app.Nats.Publish(define.SysTopicProductDel, cc)
	if err != nil {
		logger.Errorf("产品删除 pk:%s 发送nats失败 %s", pbProduct.Pk, err.Error())
	} else {
		logger.Infof("产品删除 pk:%s 发送nats成功", pbProduct.Pk)
	}

	resp.Id = req.Id
	return nil
}

func (the *ProductService) Update(ctx context.Context, req *pb.ProductUpdateReq, resp *pb.ProductUpdateResp) error {
	m, err := model.ProductGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
		return nil
	}

	item, err := model.ProductGetByModel(nil, req.Model)
	if err != nil && err != gorm.ErrRecordNotFound {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
		return nil
	}
	if err == nil && item.Id != req.Id {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "产品型号已经存在"
		return nil
	}

	m.Name = req.Name
	m.Model = req.Model
	m.Desc = req.Desc
	err = model.ProductUpdate(nil, m)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("修改产品失败:%s", err.Error())
		return nil
	}

	resp.Id = m.Id
	return nil
}

func (the *ProductService) Get(ctx context.Context, req *pb.ProductGetReq, resp *pb.ProductGetResp) error {
	if req.Id == "" && req.Pk == "" {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = "参数异常"
		return nil
	}

	var m *model.ProductModel
	var err error

	if req.Id != "" {
		m, err = model.ProductGet(nil, req.Id)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
			return nil
		}
	} else {
		m, err = model.ProductGetByPk(nil, req.Pk)
		if err != nil {
			resp.Code = errorsx.FAIL.Code
			resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
			return nil
		}
	}

	itemRet := &pb.Product{}
	utilsx.DeepCopy(m, itemRet)
	itemRet.CreateTime = m.CreatedAt.UnixMilli()
	resp.Item = itemRet
	return nil
}

func (the *ProductService) List(ctx context.Context, req *pb.ProductListReq, resp *pb.ProductListResp) error {
	list, err := model.ProductList(nil, req.Name, req.Model, req.Pk, req.Type)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取列表失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Product, 0)
	for _, m := range list {
		itemRet := &pb.Product{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		if req.LoadModelDef {
			info, err := product.LoadThingDef(m, false)
			if err != nil {
				resp.Code = errorsx.FAIL.Code
				resp.Msg = fmt.Sprintf("加载物模型失败:%s", err.Error())
				return nil
			}
			bb, _ := json.Marshal(info)
			itemRet.ThingDef = string(bb)
		}

		listRet = append(listRet, itemRet)

	}
	resp.Items = listRet
	return nil
}

func (the *ProductService) Page(ctx context.Context, req *pb.ProductPageReq, resp *pb.ProductPageResp) error {
	list, total, err := model.ProductPage(nil, req.PageIndex, req.PageSize, req.Name, req.Model, req.Pk, req.Type)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取分页失败:%s", err.Error())
		return nil
	}

	listRet := make([]*pb.Product, 0)
	for _, m := range list {
		itemRet := &pb.Product{}
		utilsx.DeepCopy(m, itemRet)
		itemRet.CreateTime = m.CreatedAt.UnixMilli()
		listRet = append(listRet, itemRet)
	}
	resp.Items = listRet
	resp.Total = total
	return nil
}

func (the *ProductService) GetModel(ctx context.Context, req *pb.ProductGetModelReq, resp *pb.ProductGetModelResp) error {
	m, err := model.ProductGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
		return nil
	}
	thingDef, err := product.LoadThingDef(m, false)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}
	bb, _ := json.Marshal(thingDef)
	itemRet := &pb.Product{}
	utilsx.DeepCopy(m, itemRet)
	itemRet.CreateTime = m.CreatedAt.UnixMilli()
	itemRet.ThingDef = string(bb)
	resp.Item = itemRet
	return nil
}

func (the *ProductService) UpdateModel(ctx context.Context, req *pb.ProductUpdateModelReq, resp *pb.ProductUpdateModelResp) error {
	_, err := model.ProductGet(nil, req.Id)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = fmt.Sprintf("获取产品失败:%s", err.Error())
		return nil
	}

	thingDef, err := define.IsThingDefValid(req.ThingDef)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	sourceDef := product.MergeToDefaultThingDef(thingDef)
	err = product.UpdateByThingDef(req.Id, sourceDef)
	if err != nil {
		resp.Code = errorsx.FAIL.Code
		resp.Msg = err.Error()
		return nil
	}

	hh, _ := json.Marshal(sourceDef)
	resp.Id = req.Id
	resp.ThingDef = string(hh)
	return nil
}
